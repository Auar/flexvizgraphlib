<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="org.un.birdeye.ui.*"
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	creationComplete="init();" >    
	
	<mx:XML  
        id="myChart"  
        source="Chart.xml" 
        /> 
  
  
  	<mx:Script source="Dashboard.as" />
	<mx:Script><![CDATA[
		import ilog.charts.AngularAxis;
	
	import flexlib.skins.SliderThumbHighlightSkin;
	import mx.controls.sliderClasses.Slider;
	
	import mx.charts.chartClasses.CartesianChart;	
	import mx.graphics.SolidColor;
	import mx.graphics.Stroke;
	import mx.controls.Alert;
	import mx.collections.*;
	import mx.charts.*;
	import mx.charts.series.*;
	import mx.charts.renderers.*;
	import mx.charts.events.*;
	import mx.controls.ColorPicker;
	import mx.events.ColorPickerEvent;
	
	import mx.charts.chartClasses.Series;
    import mx.charts.chartClasses.ChartBase;
    import mx.charts.events.ChartItemEvent;
    import mx.charts.ChartItem;
    
    // Pod
    import org.un.birdeye.measure.view.PodContentBase;
    
    // ILOG
    import mx.graphics.SolidColor;
    import ilog.maps.MapBase;
    import ilog.maps.MapEvent;
    import ilog.maps.MapFeature;
    import ilog.maps.WorldCountriesMap;
    import ilog.maps.MapSymbol;
    import ilog.charts.RadarChart;
    import ilog.charts.series.RadarLineSeries;
    import ilog.charts.series.*;
    import ilog.treemap.TreeMap;
    import ilog.treemap.TreeMap;
	
    // Symbols lib
    import com.flexibleexperiments.primitiveIcons.*;
    
    // Public vars
    public var myTreeData:XML = new XML();	
    public var myData:XML = new XML();		
	public var xmlData:XML = new XML();
	public var xmlDataModif:XML = new XML();
	public var arrAxis:Array = new Array();
	public var xField:String;
	public var yField:String;
	public var rField:String;
	public var highField:String;
	public var lowField:String;
	public var openField:String;
	public var closeField:String;
	public var labelField:String;
	public var weightField:String;
	public var colorField:String;
	public var dataField:String;
	public var CategoryxField:String;
	public var CategoryyField:String;
	public var f:SolidColor;
	public var s:Stroke;
	public var slicedResults:Array;
	public var dataList:XMLList;
	public var dataListCollection:XMLListCollection;
	public var dataSort:Sort;
	//public var numberOfSeries:int;
	public var numberOfSerie:Array=new Array();
	public var num:int=1;
	public var DisplayType:String;
	public var minxValue:int;
	public var maxxValue:int;
	public var minyValue:int;
	public var maxyValue:int;
	public var cnvs:Canvas;
	public var accordionIndex:int;
	public var HBoxMinMaxx:HBox;
	public var HBoxMinMaxy:HBox;
	
	public function ParseAxis(Axis:XML):void { 
		var AxisAttributes:XMLList = Axis.children().attributes(); 
		var i:int = 0;
		var n:String = "";
		for each (var axisElements:XML in AxisAttributes) { 
		n = axisElements.name();	
  		if (n.substr(0,4) != "nodeName") {
  			arrAxis[i]=n;
  			i++
			}
		} 
		arrAxis.sort();
		removeDup(arrAxis);		
	}
	
	public function LoadXML():void { 
		//xmlData = myData;
		
		dataList=xmlData.children();
		dataListCollection=new XMLListCollection(dataList);
		//Alert.show(dataList.length().toString(), 'Alert Box',mx.controls.Alert.OK);
		//xmlDataModif=new XML(xmlData);
		ParseAxis(xmlData)
		
		 numberItems=xmlData.children().length();
				
		cnvs1_cbxAxis1.dataProvider=arrAxis;
		cnvs1_cbyAxis1.dataProvider=arrAxis;
		cnvs1_cbRadius1.dataProvider=arrAxis;
		cnvs1_cbOpenField1.dataProvider=arrAxis;
		cnvs1_cbCloseField1.dataProvider=arrAxis;
		refreshChart();
	} 
	

	private function removeDup(a:Array):void
	{
	        for(var y:int=0;y<a.length;y++){
	                for(var z:int=(y+1);z<=a.length;z++){
	                        if(a[y]==a[z]){
	                                a.splice(z,1)
	                                z--
	                        }
	                }
	        }
	}
	
	//Fonction d'initialisation au premier lancement de l'application
	private function init():void {
		// This XML data source creates a nested tree structure
		// This would be needed for drill down capability
		myTreeData =  parentDocument.gTreeXML;
		//JR
		xmlData = parentDocument.gDataXML;
		// This data source creates a flat structure
		// myData = parentDocument.rootNode;
		createPodManager();
		cnvs1_cbForm.dataProvider=myChart.chart[0].Properties.Property.Forms.Form;
		//Alert.show(data.value, 'Alert Box',mx.controls.Alert.OK);
		cnvs1_cbxAxisType1.dataProvider=myChart.chart[0].Properties.Property.axis;
		cnvs1_cbyAxisType1.dataProvider=myChart.chart[0].Properties.Property.axis;
		cnvs1_cbDisplay.dataProvider=myChart.chart[0].Properties.Property.barTypes.barType;
		cnvs1_cbCartSerie1.dataProvider=myChart.chart.(@Type=="Cartesian").Properties.Property.Series.Serie; 
		cnvs1_cbCartForm1.dataProvider=myChart.chart.(@Type=="Cartesian").Properties.Property.cartForms.cartForm; 
		cnvs1_cbLabelPosition.dataProvider=myChart.chart.(@Type=="Pie").Properties.Property.labelPosition.value;
		//numberOfSeries=1;
		numberOfSerie[1]=1;
		//chargement du fichier XML contenant les donnÃ©es  
		
		LoadXML();
		trace(myData);
		
		
	}
	
	
	public function addDefaultChildToCnvs(pianoCnvs:Object,canvasNum:int):void{
		//this["numberOfSeries"+canvasNum]=1;
				numberOfSerie[canvasNum]=1;
				
    	
				var lblChartType:Label=new Label();
				lblChartType.id="cnvs"+canvasNum+"_lblChartType";
				lblChartType.name="cnvs"+canvasNum+"_lblChartType";
				lblChartType.x=2;
				lblChartType.y=10;
				lblChartType.text="Chart type :"
				pianoCnvs.addChild(lblChartType);
		
				var cbChartType:ComboBox=new ComboBox();
				cbChartType.id="cnvs"+canvasNum+"_cbChartType";
				cbChartType.name="cnvs"+canvasNum+"_cbChartType";
				cbChartType.dataProvider=myChart.chart.@Type;
				cbChartType.addEventListener(Event.CHANGE, changeTypeEvt); 
				cbChartType.x=73;
				cbChartType.y=8;
				cbChartType.width=160;
				pianoCnvs.addChild(cbChartType);
				
				//Alert.show(cbChartType.name.toString(), 'Alert Box',mx.controls.Alert.OK);
				
				var lblForm:Label=new Label();
				lblForm.id="cnvs"+canvasNum+"_lblForm";
				lblForm.name="cnvs"+canvasNum+"_lblForm";
				lblForm.x=3;
				lblForm.y=36;
				lblForm.text="Form :"
				pianoCnvs.addChild(lblForm);
				
				var cbForm:ComboBox=new ComboBox();
				cbForm.id="cnvs"+canvasNum+"_cbForm";
				cbForm.name="cnvs"+canvasNum+"_cbForm";
				cbForm.dataProvider=myChart.chart[0].Properties.Property.Forms.Form;
				cbForm.addEventListener(Event.CHANGE, refreshChartEvent); //parentDocument.
				cbForm.x=73;
				cbForm.y=34;
				cbForm.width=160;
				pianoCnvs.addChild(cbForm);
				
				var hrChartType:HRule=new HRule();
				hrChartType.x=13;
				hrChartType.y=89;
				hrChartType.width=210;
				pianoCnvs.addChild(hrChartType);
				
				var lblSerie:Label=new Label();
				lblSerie.id="cnvs"+canvasNum+"_lblSelectData";
				lblSerie.name="cnvs"+canvasNum+"_lblSelectData";
				lblSerie.x=3;
				lblSerie.y=165;
				lblSerie.width=139;
				lblSerie.text="Serie 1 :";
				pianoCnvs.addChild(lblSerie);
				
				var lblxAxis:Label=new Label();
				lblxAxis.id="cnvs"+canvasNum+"_lblxAxis1";
				lblxAxis.name="cnvs"+canvasNum+"_lblxAxis1";
				lblxAxis.x=3;
				lblxAxis.y=188;
				lblxAxis.text="xAxis :";
				pianoCnvs.addChild(lblxAxis);
				
				var cbxAxis:ComboBox=new ComboBox();
				cbxAxis.id="cnvs"+canvasNum+"_cbxAxis1";
				cbxAxis.name="cnvs"+canvasNum+"_cbxAxis1";
				cbxAxis.dataProvider=arrAxis;
				cbxAxis.addEventListener(Event.CHANGE, refreshChartEvent); //parentDocument.
				cbxAxis.x=73;
				cbxAxis.y=186;
				pianoCnvs.addChild(cbxAxis);
				
				var lblyAxis:Label=new Label();
				lblyAxis.id="cnvs"+canvasNum+"_lblyAxis1";
				lblyAxis.name="cnvs"+canvasNum+"_lblyAxis1";
				lblyAxis.x=3;
				lblyAxis.y=270;
				lblyAxis.text="yAxis :";
				pianoCnvs.addChild(lblyAxis);
				
				var cbyAxis:ComboBox=new ComboBox();
				cbyAxis.id="cnvs"+canvasNum+"_cbyAxis1";
				cbyAxis.name="cnvs"+canvasNum+"_cbyAxis1";
				cbyAxis.dataProvider=arrAxis;
				cbyAxis.addEventListener(Event.CHANGE, refreshChartEvent); //parentDocument.
				cbyAxis.x=73;
				cbyAxis.y=268;
				pianoCnvs.addChild(cbyAxis);
				
				var lblxAxisType:Label=new Label();
				lblxAxisType.id="cnvs"+canvasNum+"_lblxAxisType1";
				lblxAxisType.name="cnvs"+canvasNum+"_lblxAxisType1";
				lblxAxisType.x=3;
				lblxAxisType.y=214;
				lblxAxisType.text="xAxisType :";
				pianoCnvs.addChild(lblxAxisType);
				
				var cbxAxisType:ComboBox=new ComboBox();
				cbxAxisType.id="cnvs"+canvasNum+"_cbxAxisType1";
				cbxAxisType.name="cnvs"+canvasNum+"_cbxAxisType1";
				cbxAxisType.dataProvider=myChart.chart[0].Properties.Property.axis;
				cbxAxisType.addEventListener(Event.CHANGE, xAxisTypeChange); //parentDocument.
				cbxAxisType.x=73;
				cbxAxisType.y=213;
				pianoCnvs.addChild(cbxAxisType);
				
				var lblyAxisType:Label=new Label();
				lblyAxisType.id="cnvs"+canvasNum+"_lblyAxisType1";
				lblyAxisType.name="cnvs"+canvasNum+"_lblyAxisType1";
				lblyAxisType.x=3;
				lblyAxisType.y=297;
				lblyAxisType.text="yAxisType :";
				pianoCnvs.addChild(lblyAxisType);
				
				var cbyAxisType:ComboBox=new ComboBox();
				cbyAxisType.id="cnvs"+canvasNum+"_cbyAxisType1";
				cbyAxisType.name="cnvs"+canvasNum+"_cbyAxisType1";
				cbyAxisType.dataProvider=myChart.chart[0].Properties.Property.axis;
				cbyAxisType.addEventListener(Event.CHANGE, yAxisTypeChange); //parentDocument.
				cbyAxisType.x=73;
				cbyAxisType.y=295;
				pianoCnvs.addChild(cbyAxisType);
				
				var hrSel:HRule=new HRule();
				hrSel.x=13;
				hrSel.y=161;
				hrSel.width=210;
				hrSel.height=1;
				pianoCnvs.addChild(hrSel);
				
				var chkDataType:CheckBox=new CheckBox();
				chkDataType.x=10;
				chkDataType.y=95;
				chkDataType.label="Show DataTips";
				chkDataType.id="cnvs"+canvasNum+"_chkDataType";
				chkDataType.name="cnvs"+canvasNum+"_chkDataType";
				chkDataType.enabled=true;
				chkDataType.selected=true;
				chkDataType.addEventListener(MouseEvent.CLICK, refreshChartEvent);
				pianoCnvs.addChild(chkDataType);
				
				var chkLegend:CheckBox=new CheckBox();
				chkLegend.x=10;
				chkLegend.y=117;
				chkLegend.label="Show Legend";
				chkLegend.id="cnvs"+canvasNum+"_chkLegend";
				chkLegend.name="cnvs"+canvasNum+"_chkLegend";
				chkLegend.enabled=true;
				chkLegend.selected=true;
				chkLegend.addEventListener(MouseEvent.CLICK, refreshChartEvent);
				pianoCnvs.addChild(chkLegend);
				
				var chkGrid:CheckBox=new CheckBox();
				chkGrid.x=10;
				chkGrid.y=139;
				chkGrid.label="Show Grid";
				chkGrid.id="cnvs"+canvasNum+"_chkGrid";
				chkGrid.name="cnvs"+canvasNum+"_chkGrid";
				chkGrid.enabled=true;
				chkGrid.selected=false;
				chkGrid.addEventListener(MouseEvent.CLICK, refreshChartEvent);
				pianoCnvs.addChild(chkGrid);
				
				var cp:ColorPicker=new ColorPicker();
				cp.id="cnvs"+canvasNum+"_cp1";
				cp.name="cnvs"+canvasNum+"_cp1";
				cp.y=166;
				cp.x=53;
				cp.width=17;
				cp.height=17;
				cp.selectedColor=0x6699CC;
				cp.addEventListener(Event.CHANGE, refreshChartEvent);
				pianoCnvs.addChild(cp);
				
				
				var cbCartSerie:ComboBox=new ComboBox();
				cbCartSerie.id="cnvs"+canvasNum+"_cbCartSerie1";
				cbCartSerie.name="cnvs"+canvasNum+"_cbCartSerie1";
				cbCartSerie.addEventListener(Event.CHANGE, refreshCartChartEvent);
				cbCartSerie.dataProvider=myChart.chart.(@Type=="Cartesian").Properties.Property.Series.Serie;
				cbCartSerie.prompt="Select...";
				cbCartSerie.visible=false;
				cbCartSerie.x=73;
				cbCartSerie.y=163;
				pianoCnvs.addChild(cbCartSerie);
				
				var lblCartForm:Label=new Label();
				lblCartForm.id="cnvs"+canvasNum+"_lblCatForm1";
				lblCartForm.name="cnvs"+canvasNum+"_lblCatForm1";
				lblCartForm.text= "Form :";
				lblCartForm.y=370;
				lblCartForm.x=3;
				lblCartForm.visible=false;
				pianoCnvs.addChild(lblCartForm);
				
				var cbCartForm:ComboBox=new ComboBox();
				cbCartForm.id="cnvs"+canvasNum+"_cbCartForm1";
				cbCartForm.name="cnvs"+canvasNum+"_cbCartForm1";
				cbCartForm.addEventListener(Event.CHANGE, refreshChartEvent);
				cbCartForm.dataProvider=myChart.chart.(@Type=="Cartesian").Properties.Property.cartForms.cartForm;
				cbCartForm.x=73;
				cbCartForm.y=368;
				cbCartForm.visible=false;
				pianoCnvs.addChild(cbCartForm);
				
				var lblRadius:Label=new Label();
				lblRadius.id="cnvs"+canvasNum+"_lblRadius1";
				lblRadius.name="cnvs"+canvasNum+"_lblRadius1";
				lblRadius.text= "Radius :";
				lblRadius.y=370;
				lblRadius.x=3;
				lblRadius.visible=false;
				pianoCnvs.addChild(lblRadius);
				
				var cbRadius:ComboBox=new ComboBox();
				cbRadius.id="cnvs"+canvasNum+"_cbRadius1";
				cbRadius.name="cnvs"+canvasNum+"_cbRadius1";
				cbRadius.addEventListener(Event.CHANGE, refreshChartEvent);
				cbRadius.dataProvider=arrAxis;
				cbRadius.x=73;
				cbRadius.y=368;
				cbRadius.visible=false;
				pianoCnvs.addChild(cbRadius);
				
				var lblDisplay:Label=new Label();
				lblDisplay.id="cnvs"+canvasNum+"_lblDisplay";
				lblDisplay.name="cnvs"+canvasNum+"_lblDisplay";
				lblDisplay.text= "Display :";
				lblDisplay.y=62;
				lblDisplay.x=3;
				lblDisplay.visible=false;
				pianoCnvs.addChild(lblDisplay);
				
				var cbDisplay:ComboBox=new ComboBox();
				cbDisplay.id="cnvs"+canvasNum+"_cbDisplay";
				cbDisplay.name="cnvs"+canvasNum+"_cbDisplay";
				cbDisplay.addEventListener(Event.CHANGE, refreshChartEvent);
				cbDisplay.dataProvider=myChart.chart[0].Properties.Property.barTypes.barType;
				cbDisplay.x=73;
				cbDisplay.y=60;
				cbDisplay.visible=false;
				pianoCnvs.addChild(cbDisplay);
				
				var lblxInterval1:Label=new Label();
				lblxInterval1.id="cnvs"+canvasNum+"_lblxInterval1";
				lblxInterval1.name="cnvs"+canvasNum+"_lblxInterval1";
				lblxInterval1.text= "Interval :";
				lblxInterval1.y=232;
				lblxInterval1.x=150;
				lblxInterval1.visible=false;
				pianoCnvs.addChild(lblxInterval1);
				
				var txtxInterval:NumericStepper=new NumericStepper();
				txtxInterval.id="cnvs"+canvasNum+"_txtxInterval1";
				txtxInterval.name="cnvs"+canvasNum+"_txtxInterval1";
				txtxInterval.x=197;
				txtxInterval.y=230;
				txtxInterval.width=36;
				txtxInterval.visible=false;
				txtxInterval.addEventListener(Event.CHANGE, refreshChartEvent);
				pianoCnvs.addChild(txtxInterval);
				
				var HBoxMinMaxx:HBox=new HBox();
				HBoxMinMaxx.id="cnvs"+canvasNum+"_HBoxMinMaxx";
				HBoxMinMaxx.name="cnvs"+canvasNum+"_HBoxMinMaxx";
				HBoxMinMaxx.x=4;
				HBoxMinMaxx.y=248;
				HBoxMinMaxx.percentWidth=100
				pianoCnvs.addChild(HBoxMinMaxx);
				
				var lblxMin:Label=new Label();
				lblxMin.id="cnvs"+canvasNum+"_lblxMin1";
				lblxMin.name="cnvs"+canvasNum+"_lblxMin1";
				lblxMin.text= "min";
				lblxMin.visible=false;
				HBoxMinMaxx.addChild(lblxMin);
				
				var minMaxxSlider:flexlib.controls.HSlider=new flexlib.controls.HSlider();
				minMaxxSlider.id="cnvs"+canvasNum+"_minMaxxSlider";
				minMaxxSlider.name="cnvs"+canvasNum+"_minMaxxSlider";
				minMaxxSlider.setStyle("trackHighlightSkin",flexlib.skins.SliderThumbHighlightSkin);
				minMaxxSlider.allowTrackClick=true;
				minMaxxSlider.allowThumbOverlap=true;
				minMaxxSlider.liveDragging=true;
				minMaxxSlider.showDataTip=true;
				minMaxxSlider.setStyle("dataTipPlacement","bottom");
				minMaxxSlider.setStyle("dataTipOffset",3);
				minMaxxSlider.setStyle("showTrackHighlight",true);
				minMaxxSlider.thumbCount=2;
				minMaxxSlider.percentWidth=100;
				minMaxxSlider.addEventListener(Event.CHANGE, refreshChartEvent);
				minMaxxSlider.snapInterval=0.1;
				minMaxxSlider.visible=false;
				minMaxxSlider.maximum=maxxSlideValue;
				minMaxxSlider.values=[0, maxxSlideDefault];
				HBoxMinMaxx.addChild(minMaxxSlider);
				
				var lblxMax:Label=new Label();
				lblxMax.id="cnvs"+canvasNum+"_lblxMax1";
				lblxMax.name="cnvs"+canvasNum+"_lblxMax1";
				lblxMax.text= "max";
				lblxMax.visible=false;
				HBoxMinMaxx.addChild(lblxMax);
				
				var lblyInterval1:Label=new Label();
				lblyInterval1.id="cnvs"+canvasNum+"_lblyInterval1";
				lblyInterval1.name="cnvs"+canvasNum+"_lblyInterval1";
				lblyInterval1.text= "Interval :";
				lblyInterval1.y=324;
				lblyInterval1.x=150;
				lblyInterval1.visible=false;
				pianoCnvs.addChild(lblyInterval1);
				
				var txtyInterval:NumericStepper=new NumericStepper();
				txtyInterval.id="cnvs"+canvasNum+"_txtyInterval1";
				txtyInterval.name="cnvs"+canvasNum+"_txtyInterval1";
				txtyInterval.x=197;
				txtyInterval.y=322;
				txtyInterval.width=36;
				txtyInterval.visible=false;
				txtyInterval.addEventListener(Event.CHANGE, refreshChartEvent);
				pianoCnvs.addChild(txtyInterval);
				
				var HBoxMinMaxy:HBox=new HBox();
				HBoxMinMaxy.id="cnvs"+canvasNum+"_HBoxMinMaxy";
				HBoxMinMaxy.name="cnvs"+canvasNum+"_HBoxMinMaxy";
				HBoxMinMaxy.x=4;
				HBoxMinMaxy.y=345;
				HBoxMinMaxy.percentWidth=100
				pianoCnvs.addChild(HBoxMinMaxy);
				
				var lblyMin:Label=new Label();
				lblyMin.id="cnvs"+canvasNum+"_lblyMin1";
				lblyMin.name="cnvs"+canvasNum+"_lblyMin1";
				lblyMin.text= "min";
				lblyMin.visible=false;
				HBoxMinMaxy.addChild(lblyMin);
				
				var minMaxySlider:flexlib.controls.HSlider=new flexlib.controls.HSlider();
				minMaxySlider.id="cnvs"+canvasNum+"_minMaxySlider";
				minMaxySlider.name="cnvs"+canvasNum+"_minMaxySlider";
				minMaxySlider.setStyle("trackHighlightSkin",flexlib.skins.SliderThumbHighlightSkin);
				minMaxySlider.allowTrackClick=true;
				minMaxySlider.allowThumbOverlap=true;
				minMaxySlider.liveDragging=true;
				minMaxySlider.showDataTip=true;
				minMaxySlider.setStyle("dataTipPlacement","bottom");
				minMaxySlider.setStyle("dataTipOffset",3);
				minMaxySlider.setStyle("showTrackHighlight",true);
				minMaxySlider.thumbCount=2;
				minMaxySlider.percentWidth=100;
				minMaxySlider.addEventListener(Event.CHANGE, refreshChartEvent);
				minMaxySlider.snapInterval=0.1;
				minMaxySlider.visible=false;
				minMaxySlider.minimum=0;
				minMaxySlider.maximum=maxySlideValue;
				minMaxySlider.values=[0, maxySlideDefault];
				HBoxMinMaxy.addChild(minMaxySlider);
				
				var lblyMax:Label=new Label();
				lblyMax.id="cnvs"+canvasNum+"_lblyMax1";
				lblyMax.name="cnvs"+canvasNum+"_lblyMax1";
				lblyMax.text= "max";
				lblyMax.visible=false;
				HBoxMinMaxy.addChild(lblyMax);
				
				var hrEnd:HRule=new HRule();
				hrEnd.name="cnvs"+canvasNum+"_hrEnd";
				hrEnd.id="cnvs"+canvasNum+"_hrEnd";
				hrEnd.x=10;
				hrEnd.y=430;
				hrEnd.width=210;
				pianoCnvs.addChild(hrEnd);
				
				var btnAddSerie:Button=new Button();
				btnAddSerie.id="cnvs"+canvasNum+"_btnAddNewSerie";
				btnAddSerie.name="cnvs"+canvasNum+"_btnAddNewSerie";
				btnAddSerie.x=73;
				btnAddSerie.y=440;
				btnAddSerie.label="Add new serie";
				btnAddSerie.addEventListener(MouseEvent.CLICK, addSeries);
				pianoCnvs.addChild(btnAddSerie);
				
				var lblExplode:Label=new Label();
				lblExplode.id="cnvs"+canvasNum+"_lblExplode";
				lblExplode.name="cnvs"+canvasNum+"_lblExplode";
				lblExplode.text= "Distance of Separation";
				lblExplode.visible=false;
				lblExplode.x=3;
				lblExplode.y=317;
				lblExplode.setStyle("fontSize",9);
				lblExplode.setStyle("textAlign","center");
				lblExplode.percentWidth=100;
				pianoCnvs.addChild(lblExplode);
				
				var PieExplode:flexlib.controls.HSlider=new flexlib.controls.HSlider();
				PieExplode.id="cnvs"+canvasNum+"_PieExplode";
				PieExplode.name="cnvs"+canvasNum+"_PieExplode";
				PieExplode.setStyle("trackHighlightSkin",flexlib.skins.SliderThumbHighlightSkin);
				PieExplode.allowTrackClick=true;
				PieExplode.allowThumbOverlap=true;
				PieExplode.liveDragging=true;
				PieExplode.showDataTip=true;
				PieExplode.setStyle("dataTipPlacement","bottom");
				PieExplode.setStyle("dataTipOffset",3);
				PieExplode.setStyle("showTrackHighlight",true);
				PieExplode.thumbCount=1;
				PieExplode.percentWidth=100;
				PieExplode.addEventListener(Event.CHANGE, refreshChartEvent);
				PieExplode.snapInterval=.01;
				PieExplode.visible=false;
				PieExplode.minimum=0;
				PieExplode.maximum=1;
				PieExplode.values=[0];
				PieExplode.x=3;
				PieExplode.y=324;
				pianoCnvs.addChild(PieExplode);
				
				var lblAngle:Label=new Label();
				lblAngle.id="cnvs"+canvasNum+"_lblAngle";
				lblAngle.name="cnvs"+canvasNum+"_lblAngle";
				lblAngle.text= "Angle of rotation";
				lblAngle.visible=false;
				lblAngle.x=3;
				lblAngle.y=339;
				lblAngle.setStyle("fontSize",9);
				lblAngle.setStyle("textAlign","center");
				lblAngle.percentWidth=100;
				pianoCnvs.addChild(lblAngle);
				
				var PieAngle:flexlib.controls.HSlider=new flexlib.controls.HSlider();
				PieAngle.id="cnvs"+canvasNum+"_PieAngle";
				PieAngle.name="cnvs"+canvasNum+"_PieAngle";
				PieAngle.setStyle("trackHighlightSkin",flexlib.skins.SliderThumbHighlightSkin);
				PieAngle.allowTrackClick=true;
				PieAngle.allowThumbOverlap=true;
				PieAngle.liveDragging=true;
				PieAngle.showDataTip=true;
				PieAngle.setStyle("dataTipPlacement","bottom");
				PieAngle.setStyle("dataTipOffset",3);
				PieAngle.setStyle("showTrackHighlight",true);
				PieAngle.thumbCount=1;
				PieAngle.percentWidth=100;
				PieAngle.addEventListener(Event.CHANGE, refreshChartEvent);
				PieAngle.snapInterval=1;
				PieAngle.visible=false;
				PieAngle.minimum=0;
				PieAngle.maximum=360;
				PieAngle.values=[0];
				PieAngle.x=3;
				PieAngle.y=345;
				PieAngle.dataTipFormatFunction=degrees_func
				pianoCnvs.addChild(PieAngle);
				
				var lblDonuts:Label=new Label();
				lblDonuts.id="cnvs"+canvasNum+"_lblDonuts";
				lblDonuts.name="cnvs"+canvasNum+"_lblDonuts";
				lblDonuts.text= "Donuts";
				lblDonuts.visible=false;
				lblDonuts.x=3;
				lblDonuts.y=361;
				lblDonuts.setStyle("fontSize",9);
				lblDonuts.setStyle("textAlign","center");
				lblDonuts.percentWidth=100;
				pianoCnvs.addChild(lblDonuts);
				
				var PieDonuts:flexlib.controls.HSlider=new flexlib.controls.HSlider();
				PieDonuts.id="cnvs"+canvasNum+"_PieDonuts";
				PieDonuts.name="cnvs"+canvasNum+"_PieDonuts";
				PieDonuts.setStyle("trackHighlightSkin",flexlib.skins.SliderThumbHighlightSkin);
				PieDonuts.allowTrackClick=true;
				PieDonuts.allowThumbOverlap=true;
				PieDonuts.liveDragging=true;
				PieDonuts.showDataTip=true;
				PieDonuts.setStyle("dataTipPlacement","bottom");
				PieDonuts.setStyle("dataTipOffset",3);
				PieDonuts.setStyle("showTrackHighlight",true);
				PieDonuts.thumbCount=1;
				PieDonuts.percentWidth=100;
				PieDonuts.addEventListener(Event.CHANGE, refreshChartEvent);
				PieDonuts.snapInterval=0.01;
				PieDonuts.visible=false;
				PieDonuts.minimum=0;
				PieDonuts.maximum=1;
				PieDonuts.values=[0];
				PieDonuts.x=3;
				PieDonuts.y=368;
				pianoCnvs.addChild(PieDonuts);
				
				var lblLabelPosition:Label=new Label();
				lblLabelPosition.id="cnvs"+canvasNum+"_lblLabelPosition";
				lblLabelPosition.name="cnvs"+canvasNum+"_lblLabelPosition";
				lblLabelPosition.text= "Label Position :";
				lblLabelPosition.y=297;
				lblLabelPosition.x=3;
				lblLabelPosition.visible=false;
				pianoCnvs.addChild(lblLabelPosition);
				
				var cbLabelPosition:ComboBox=new ComboBox();
				cbLabelPosition.id="cnvs"+canvasNum+"_cbLabelPosition";
				cbLabelPosition.name="cnvs"+canvasNum+"_cbLabelPosition";
				cbLabelPosition.addEventListener(Event.CHANGE, refreshChartEvent);
				cbLabelPosition.dataProvider=myChart.chart.(@Type=="Pie").Properties.Property.labelPosition.value;
				cbLabelPosition.x=95;
				cbLabelPosition.y=295;
				cbLabelPosition.visible=false;
				pianoCnvs.addChild(cbLabelPosition);
				
				var lblOpenField:Label=new Label();
				lblOpenField.id="cnvs"+canvasNum+"_lblOpenField1";
				lblOpenField.name="cnvs"+canvasNum+"_lblOpenField1";
				lblOpenField.text= "Open :";
				lblOpenField.y=375;
				lblOpenField.x=3;
				lblOpenField.width=55;
				lblOpenField.visible=false;
				pianoCnvs.addChild(lblOpenField);
				
				var cbOpenField:ComboBox=new ComboBox();
				cbOpenField.id="cnvs"+canvasNum+"_cbOpenField1";
				cbOpenField.name="cnvs"+canvasNum+"_cbOpenField1";
				cbOpenField.addEventListener(Event.CHANGE, refreshChartEvent);
				cbOpenField.dataProvider=arrAxis;
				cbOpenField.x=73;
				cbOpenField.y=373;
				cbOpenField.visible=false;
				pianoCnvs.addChild(cbOpenField);
				
				var lblCloseField:Label=new Label();
				lblCloseField.id="cnvs"+canvasNum+"_lblCloseField1";
				lblCloseField.name="cnvs"+canvasNum+"_lblCloseField1";
				lblCloseField.text= "Close :";
				lblCloseField.y=398;
				lblCloseField.x=3;
				lblCloseField.width=55;
				lblCloseField.visible=false;
				pianoCnvs.addChild(lblCloseField);
				
				var cbCloseField:ComboBox=new ComboBox();
				cbCloseField.id="cnvs"+canvasNum+"_cbCloseField1";
				cbCloseField.name="cnvs"+canvasNum+"_cbCloseField1";
				cbCloseField.addEventListener(Event.CHANGE, refreshChartEvent);
				cbCloseField.dataProvider=arrAxis;
				cbCloseField.x=73;
				cbCloseField.y=396;
				cbCloseField.visible=false;
				pianoCnvs.addChild(cbCloseField)
				//Alert.show("cnvs"+canvasNum+"_HBoxMinMaxx"+"/ cnvs"+accordionIndex+"_minMaxxSlider", 'Alert Box',mx.controls.Alert.OK);
				//Alert.show("cnvs"+accordionIndex+"_minMaxxSlider" + " / cnvs"+accordionIndex+"_HBoxMinMaxx", 'Alert Box',mx.controls.Alert.OK);
			refreshChart();
			}
			
	private function addSeries(event:Event):void{
		//numberOfSeries=numberOfSeries+1;
		accordionIndex=leftAccordion.selectedIndex+1
		numberOfSerie[accordionIndex]=numberOfSerie[accordionIndex]+1;
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbDisplay")).visible=true;
		Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblDisplay")).visible=true;
		
		var myColor:uint = Math.round( Math.random()*0xFFFFFF );
		
		var sep:HRule=new HRule();
		sep.id="cnvs"+accordionIndex+"_sep"+numberOfSerie[accordionIndex];
		sep.name="cnvs"+accordionIndex+"_sep"+numberOfSerie[accordionIndex];
		sep.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y;
		sep.x=13;sep.width=210;
		cnvs.addChild(sep);
		
		var lblSerieNum:Label=new Label();
		lblSerieNum.id="cnvs"+accordionIndex+"_lblSerieNum"+numberOfSerie[accordionIndex];
		lblSerieNum.name="cnvs"+accordionIndex+"_lblSerieNum"+numberOfSerie[accordionIndex];
		lblSerieNum.text= "Serie " + numberOfSerie[accordionIndex] + " :";
		lblSerieNum.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+10;
		lblSerieNum.x=3;
		cnvs.addChild(lblSerieNum);
		
		var colPicker:ColorPicker=new ColorPicker();
		colPicker.id="cnvs"+accordionIndex+"_cp"+numberOfSerie[accordionIndex];
		colPicker.name="cnvs"+accordionIndex+"_cp"+numberOfSerie[accordionIndex];
		colPicker.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+10;
		colPicker.x=60;
		colPicker.width=17;
		colPicker.height=17;
		colPicker.selectedColor=myColor;//0x6699CC;
		colPicker.addEventListener(Event.CHANGE, refreshChartEvent);
		if (myChart.chart.(@Type==ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()).Properties.Property.(@name=="Fill").length() !=0)
		{
			colPicker.visible=true;
		}else{
			colPicker.visible=false;
		}
		cnvs.addChild(colPicker);
		
		var cbxAxis:ComboBox=new ComboBox();
		cbxAxis.id="cnvs"+accordionIndex+"_cbxAxis"+numberOfSerie[accordionIndex];
		cbxAxis.name="cnvs"+accordionIndex+"_cbxAxis"+numberOfSerie[accordionIndex];
		cbxAxis.addEventListener(Event.CHANGE, refreshChartEvent);
		cbxAxis.dataProvider=arrAxis;
		cbxAxis.prompt="High Field...";
		cbxAxis.x=85;
		cbxAxis.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+8;
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="HighLowOpenClose")
		{
			cbxAxis.visible=true;
		}else{
			cbxAxis.visible=false;
		}
		cnvs.addChild(cbxAxis);
		
		var cbyAxis:ComboBox=new ComboBox();
		cbyAxis.id="cnvs"+accordionIndex+"_cbyAxis"+numberOfSerie[accordionIndex];
		cbyAxis.name="cnvs"+accordionIndex+"_cbyAxis"+numberOfSerie[accordionIndex];
		cbyAxis.addEventListener(Event.CHANGE, refreshChartEvent);
		cbyAxis.dataProvider=arrAxis;
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="HighLowOpenClose")
		{
			cbyAxis.prompt="Low Field...";
			cbyAxis.x=85;
			cbyAxis.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+38;
		}else{
			cbyAxis.prompt="Select...";
			cbyAxis.x=85;
			cbyAxis.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+8;
		}
		cnvs.addChild(cbyAxis);
		
		
		var cbCartSerie:ComboBox=new ComboBox();
		cbCartSerie.id="cnvs"+accordionIndex+"_cbCartSerie"+numberOfSerie[accordionIndex];
		cbCartSerie.name="cnvs"+accordionIndex+"_cbCartSerie"+numberOfSerie[accordionIndex];
		cbCartSerie.addEventListener(Event.CHANGE, refreshCartChartEvent);
		cbCartSerie.dataProvider=myChart.chart.(@Type=="Cartesian").Properties.Property.Series.Serie;
		cbCartSerie.prompt="Select...";
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Cartesian")
		{
			cbCartSerie.visible=true;
		}else{
			cbCartSerie.visible=false;
		}
		cbCartSerie.x=3;
		cbCartSerie.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+38;
		cnvs.addChild(cbCartSerie);
		
		
		/*var lblCartForm:Label=new Label();
		lblCartForm.id="lblCartForm"+numberOfSerie[accordionIndex];
		lblCartForm.name="lblCartForm"+numberOfSerie[accordionIndex];
		lblCartForm.text= "Form :";
		lblCartForm.y=hrEnd.y+10;
		lblCartForm.x=3;
		cnvs.addChild(lblCartForm);*/
		
		var cbCartForm:ComboBox=new ComboBox();
		cbCartForm.id="cnvs"+accordionIndex+"_cbCartForm"+numberOfSerie[accordionIndex];
		cbCartForm.name="cnvs"+accordionIndex+"_cbCartForm"+numberOfSerie[accordionIndex];
		cbCartForm.addEventListener(Event.CHANGE, refreshChartEvent);
		cbCartForm.dataProvider=myChart.chart.(@Type=="Cartesian").Properties.Property.cartForms.cartForm;
		cbCartForm.prompt="Select...";
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Cartesian")
		{
			cbCartForm.visible=true;
		}else{
			cbCartForm.visible=false;
		}
		cbCartForm.x=120;
		cbCartForm.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+38;
		cnvs.addChild(cbCartForm);
		
		var cbRadius:ComboBox=new ComboBox();
		cbRadius.id="cnvs"+accordionIndex+"_cbRadius"+numberOfSerie[accordionIndex];
		cbRadius.name="cnvs"+accordionIndex+"_cbRadius"+numberOfSerie[accordionIndex];
		cbRadius.addEventListener(Event.CHANGE, refreshChartEvent);
		cbRadius.dataProvider=arrAxis;
		cbRadius.prompt="Radius...";
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Bubble")
		{
			cbRadius.visible=true;
		}else{
			cbRadius.visible=false;
		}
		cbRadius.x=120;
		cbRadius.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+38;
		cnvs.addChild(cbRadius);
		
		var cbOpen:ComboBox=new ComboBox();
		cbOpen.id="cnvs"+accordionIndex+"_cbOpenField"+numberOfSerie[accordionIndex];
		cbOpen.name="cnvs"+accordionIndex+"_cbOpenField"+numberOfSerie[accordionIndex];
		cbOpen.addEventListener(Event.CHANGE, refreshChartEvent);
		cbOpen.dataProvider=arrAxis;
		cbOpen.prompt="Open Field...";
		cbOpen.x=85;
		cbOpen.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+68;
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="HighLowOpenClose")
		{
			cbOpen.visible=true;
		}else{
			cbOpen.visible=false;
		}
		cnvs.addChild(cbOpen);
		
		var cbClose:ComboBox=new ComboBox();
		cbClose.id="cnvs"+accordionIndex+"_cbCloseField"+numberOfSerie[accordionIndex];
		cbClose.name="cnvs"+accordionIndex+"_cbCloseField"+numberOfSerie[accordionIndex];
		cbClose.addEventListener(Event.CHANGE, refreshChartEvent);
		cbClose.dataProvider=arrAxis;
		cbClose.prompt="Close Field...";
		cbClose.x=85;
		cbClose.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+98;
		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="HighLowOpenClose")
		{
			cbClose.visible=true;
		}else{
			cbClose.visible=false;
		}
		cnvs.addChild(cbClose);
		
		var chkRemove:CheckBox=new CheckBox();
		chkRemove.id="cnvs"+accordionIndex+"_chkRemove"+numberOfSerie[accordionIndex];
		chkRemove.name="cnvs"+accordionIndex+"_chkRemove"+numberOfSerie[accordionIndex];
		chkRemove.x=200;
		chkRemove.y=HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+9;
		chkRemove.addEventListener(MouseEvent.CLICK, removeSeriesEvent);
		cnvs.addChild(chkRemove);
		
		Button(cnvs.getChildByName("cnvs"+accordionIndex+"_btnAddNewSerie")).move(Button(cnvs.getChildByName("cnvs"+accordionIndex+"_btnAddNewSerie")).x,Button(cnvs.getChildByName("cnvs"+accordionIndex+"_btnAddNewSerie")).y+158);
		HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).move(HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).x,HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y+158);
	}
	
	private function removeSeriesEvent(event:Event):void{
		accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		num=event.target.name.substr(15);
		
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_lblSerieNum"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_chkRemove"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num));
		cnvs.removeChild(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num));
		
		for (var i:int=1; i<=numberOfSerie[accordionIndex]; i++) { 
			if (i>num){
				HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+i)).move(HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+i)).x,HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+i)).y-158);
				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblSerieNum"+i)).move(Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblSerieNum"+i)).x,Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblSerieNum"+i)).y-158);
				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblSerieNum"+i)).text="Serie " + (i-1) + " :";
				ColorPicker(cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+i)).move(ColorPicker(cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+i)).x,ColorPicker(cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+i)).y-158);
				CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkRemove"+i)).move(CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkRemove"+i)).x,CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkRemove"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+i)).y-158);
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+i)).move(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+i)).x,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+i)).y-158);
				
				cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+i).name="cnvs"+accordionIndex+"_sep"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_lblSerieNum"+i).name="cnvs"+accordionIndex+"_lblSerieNum"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+i).name="cnvs"+accordionIndex+"_cp"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+i).name="cnvs"+accordionIndex+"_cbyAxis"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_chkRemove"+i).name="cnvs"+accordionIndex+"_chkRemove"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+i).name="cnvs"+accordionIndex+"_cbCartSerie"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+i).name="cnvs"+accordionIndex+"_cbCartForm"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+i).name="cnvs"+accordionIndex+"_cbRadius"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+i).name="cnvs"+accordionIndex+"_cbxAxis"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+i).name="cnvs"+accordionIndex+"_cbOpenField"+(i-1);
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+i).name="cnvs"+accordionIndex+"_cbCloseField"+(i-1);
			}
		}
		Button(cnvs.getChildByName("cnvs"+accordionIndex+"_btnAddNewSerie")).move(Button(cnvs.getChildByName("cnvs"+accordionIndex+"_btnAddNewSerie")).x,Button(cnvs.getChildByName("cnvs"+accordionIndex+"_btnAddNewSerie")).y-158);
		HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).move(HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).x,HRule(cnvs.getChildByName("cnvs"+accordionIndex+"_hrEnd")).y-158);
		
		numberOfSerie[accordionIndex]=numberOfSerie[accordionIndex]-1;
		//numberOfSeries=numberOfSeries-1;
		
		//if(numberOfSeries==1){
		if(numberOfSerie[accordionIndex]==1){
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblDisplay")).visible=false;
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbDisplay")).visible=false;
		}
		
		refreshChart();
	}	
	
	//Fonction qui dÃ©finit les Ã©lÃ©ments paramÃ©trables en fonction du type de graphique sÃ©lÃ©ctionnÃ©
	public function changeTypeEvt(event:Event):void {
		accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		var strChartType:String = ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()
		HBoxMinMaxx=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxx"))
		HBoxMinMaxy=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxy"))
		
		//show or hide form combobox
		if (myChart.chart.(@Type==strChartType).Properties.Property.Forms.length() !=0)
		{
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbForm")).visible=true;
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblForm")).visible=true;cnvs1_lblForm
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbForm")).dataProvider=myChart.chart.(@Type==strChartType).Properties.Property.Forms.Form;
		}else{
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbForm")).visible=false;
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblForm")).visible=false;
		}
		
		//show or hide x/y AxisType combobox
		if (myChart.chart.(@Type==strChartType).Properties.Property.axis.length() !=0)
		{
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).visible=true;
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxisType1")).visible=true;
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).visible=true;
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxisType1")).visible=true;
		}else{
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).visible=false;
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxisType1")).visible=false;
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).visible=false;
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxisType1")).visible=false;
		}
		
		//show or hide show Grid checkbox
		if (myChart.chart.(@Type==strChartType).Properties.Property.(@name=="GridLines").length() !=0)
		{
			CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkGrid")).visible=true;
		}else{
			CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkGrid")).visible=false;
		}
		
		
		//show or hide color picker
		if (myChart.chart.(@Type==strChartType).Properties.Property.(@name=="Fill").length() !=0)
		{
			for (var i:int=1; i<=numberOfSerie[accordionIndex]; i++) { 
				cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+i).visible=true;
			}
		}else{
			for (var i:int=1; i<=numberOfSerie[accordionIndex]; i++) { 
				cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+i).visible=false;
			}
		}
		
		//show or hide Display
		if (myChart.chart.(@Type==strChartType).Properties.Property.(@name=="barTypes").length() !=0)
		{
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblDisplay")).visible=true;
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbDisplay")).visible=true;
		}else{
			Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblDisplay")).visible=false;
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbDisplay")).visible=false;
		}
		
		
		
		
		for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
			if (strChartType=="Cartesian")
			{
				cnvs.getChildByName("cnvs"+accordionIndex+"_lblLabelPosition").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbLabelPosition").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_PieExplode").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_PieAngle").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_lblExplode").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_lblAngle").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_lblDonuts").visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_PieDonuts").visible=false;
				if(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).selectedLabel.toString()=="Bubble"){
					if(num==1){
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=true;
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=false;
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=false;
					}else{
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38)
					}
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=false;
				}else if(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).selectedLabel.toString()=="HLOC"){
					if(num==1){
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=false;
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=true;
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=true;
					}else{
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=true;
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).visible=true;
						
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(85,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8)
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+128);
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+98);
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+68);
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Low Field...";
					}
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=true;
				}else{
					if(num==1){
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=false;
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=false;
						cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=false;
					}else{
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(85,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8)
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select..."
						ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38)
					}
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=false;
				}
			}else if (myChart.chart.(@Type==strChartType).Properties.Property.(@name=="radiusField").length() !=0){
				if(num==1){
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblLabelPosition").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbLabelPosition").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieExplode").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieAngle").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblExplode").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblAngle").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblDonuts").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieDonuts").visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="xAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="yAxis :";
				}else{
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select...";
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(85,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8)
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38)
				}
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=true;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=false;
			}else if (strChartType=="Pie"){
				if(num==1){
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="Field :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).visible=false;
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
					Label(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_lblxMin1")).visible=false;
					Label(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_lblxMax1")).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxInterval1")).visible=false;
		    		flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).visible=false;
		    		NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtxInterval1")).visible=false;
    				Label(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_lblyMin1")).visible=false;
					Label(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_lblyMax1")).visible=false;
		    		Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyInterval1")).visible=false;
		    		flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).visible=false;
		    		NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtyInterval1")).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblLabelPosition").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbLabelPosition").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieExplode").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieAngle").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblExplode").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblAngle").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblDonuts").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieDonuts").visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=false;
				}else{
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(85,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select...";
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
				}
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=false;	
			}else if (strChartType=="Candlestick" || strChartType=="HighLowOpenClose"){
				if(num==1){
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).visible=true;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="High Field :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="Low Field :";
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=true;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblLabelPosition").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbLabelPosition").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieExplode").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieAngle").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblExplode").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblAngle").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblDonuts").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieDonuts").visible=false;
					
				}else{
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+98);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+68);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Low Field...";
					
					//ComboBox(cnvs.getChildByName("cbyAxis"+num)).move(cnvs.getChildByName("cbyAxis"+num).x,cnvs.getChildByName("sep"+num).y+38);
					//ComboBox(cnvs.getChildByName("cbyAxis"+i)).move(ComboBox(cnvs.getChildByName("cbyAxis"+i)).x,ComboBox(cnvs.getChildByName("cbyAxis"+i)).y+30);
				}	
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=true;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=true;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=true;
				
			}else{
				if(num==1){
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num).visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).visible=true;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="xAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="yAxis :";
					
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblLabelPosition").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbLabelPosition").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieExplode").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieAngle").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblExplode").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblAngle").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_lblDonuts").visible=false;
					cnvs.getChildByName("cnvs"+accordionIndex+"_PieDonuts").visible=false;
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=true;
				}else{
					cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).visible=false;
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(85,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8)
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select...";
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3,cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38)
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).visible=false;
				}
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num).visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).visible=false;
				cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).visible=false;
			}
		}
		drawChart(strChartType);
    }
    
    
	
	public function FindMinMax(axe:String):void { 
		accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		HBoxMinMaxx=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxx"))
		HBoxMinMaxy=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxy"))
		var AxisAttributes:XMLList = xmlData.children().attributes()
		var arrValues:Array = new Array();
		
		//Alert.show(AxisAttributes.toXMLString(), 'Alert Box',mx.controls.Alert.OK);
		var i:int = 0;
		var n:String = "";
		var serieField:String
		for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
			if(axe=="x"){
				serieField=ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis1")).selectedLabel.toString();
			}else{
    			serieField=ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			}
			for each (var axisElements:XML in AxisAttributes) { 
			
				n = axisElements.name();	
		  		if (n == serieField) {
		  			arrValues[i]=int(axisElements.toXMLString());
		  			i++
				}
			} 
		}
		
		arrValues.sort(Array.NUMERIC);
		
		if(axe=="x"){
			minxValue=arrValues[0];
			maxxValue=arrValues[arrValues.length-1];
			maxxSlideValue=int(arrValues[arrValues.length-1])//*numberOfSerie[accordionIndex];
			maxxSlideDefault=int(arrValues[arrValues.length-1]);	
			flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).minimum=minxValue;
			flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).maximum=maxxValue;
			//flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).values=[minxValue, maxxValue];
		}else{
			minyValue=arrValues[0];
			maxyValue=arrValues[arrValues.length-1];
			maxySlideValue=int(arrValues[arrValues.length-1])*2//*numberOfSerie[accordionIndex];
			maxySlideDefault=int(arrValues[arrValues.length-1]);
			flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).minimum=minyValue;
			flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).maximum=maxyValue;
			//flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).values=[minyValue, maxyValue];
		}
	}
    
 private function xAxisTypeChange(event:Event):void{
 	accordionIndex=leftAccordion.selectedIndex+1
	cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
	HBoxMinMaxx=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxx"))
		if(event.target.selectedLabel.toString()=="Category"){
    		Label(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_lblxMin1")).visible=false;
    		Label(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_lblxMax1")).visible=false;
    		Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxInterval1")).visible=false;
    		flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).visible=false;
    		NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtxInterval1")).visible=false;
    	}else{
    		Label(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_lblxMin1")).visible=true;
    		Label(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_lblxMax1")).visible=true;
    		Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxInterval1")).visible=true;
    		flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).visible=true;
    		NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtxInterval1")).visible=true;
    		FindMinMax("x");
    	}
    	refreshChart();
    }
    
    
	
    private function yAxisTypeChange(event:Event):void{
    	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		HBoxMinMaxy=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxy"))
    	if(event.target.selectedLabel.toString()=="Category"){
    		Label(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_lblyMin1")).visible=false;
    		Label(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_lblyMax1")).visible=false;
    		Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyInterval1")).visible=false;
    		flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).visible=false;
    		NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtyInterval1")).visible=false;
    	}else{
    		Label(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_lblyMin1")).visible=true;
    		Label(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_lblyMax1")).visible=true;
    		Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyInterval1")).visible=true;
    		flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).visible=true;
    		NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtyInterval1")).visible=true;
    		FindMinMax("y");
    		
    	}
    	
    	refreshChart();
    }
    
    private function refreshChart():void {
    	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
    	var strChartType:String = ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()
    	drawChart(strChartType);
    }
    
     public function refreshChartEvent(event:Event):void {
     	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
    	var strChartType:String = ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()
    	drawChart(strChartType);
    }
  
    private function refreshCartChartEvent(event:Event):void {
    	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
    	num=event.target.name.substr(17);
    	if(event.target.selectedLabel.toString()=="Area" || event.target.selectedLabel.toString()=="Line")
    	{
    		if (num==1)
				{
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num)).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCatForm"+num)).visible=true;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="xAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="yAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num)).visible=false;
    				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num)).visible=false;
				}else{
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select...";
    				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+98);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+68);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
				}
			ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num)).visible=false;	
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).visible=true;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).visible=false;
    	}else if (event.target.selectedLabel.toString()=="Bubble"){
    		if (num==1)
			{
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCatForm"+num)).visible=false;
    				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num)).visible=true;
    				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="xAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="yAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num)).visible=false;
    				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num)).visible=false;
    		}else{
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select...";
    				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+98);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+68);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
			}
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num)).visible=true;
    		
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).visible=false;
    	}else if (event.target.selectedLabel.toString()=="Candlestick" || event.target.selectedLabel.toString()=="HLOC"){
    		if (num==1)
			{
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num)).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCatForm"+num)).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="High Field :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="Low Field :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num)).visible=true;
    				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num)).visible=true;
    		}else{
    				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Low Field...";
    				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+128);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+98);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+68);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(85, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=true;
    		}
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num)).visible=false;	
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).visible=true;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).visible=true;
    	}else{
    		if (num==1)
				{
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCatForm"+num)).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblRadius"+num)).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCatForm"+num)).visible=false;
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblxAxis"+num)).text="xAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblyAxis"+num)).text="yAxis :";
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblOpenField"+num)).visible=false;
    				Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCloseField"+num)).visible=false;
				}else{
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).prompt="Select...";
    				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+98);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+68);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+8);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).move(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num).x, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).move(3, cnvs.getChildByName("cnvs"+accordionIndex+"_sep"+num).y+38);
					ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).visible=false;
				}
				
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).visible=false;
    		ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).visible=false;
    	}
    	refreshChart();
    }
    
   private function showhideCartesianSerie(chartType:String):void{
   	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
   		for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Cartesian")
			{
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).visible=true;
			}else{
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).visible=false;
				ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).visible=false
				if (num==1)
				{
					Label(cnvs.getChildByName("cnvs"+accordionIndex+"_lblCatForm"+num)).visible=false;
				}
				
			}
		}
   }
   
   
   
    //function qui crÃ©Ã© le graphique en fonction des paramÃ¨tres sÃ©lÃ©ctionnÃ©s depuis le tableau de bord
    private function drawChart(strChartType:String):void {
    	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
    	FindMinMax("x");
    	FindMinMax("y");
    	
    	// p1.removeAllChildren();
    	
    	showhideCartesianSerie(strChartType);
		xField="@"+ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis1")).selectedLabel.toString();
    	DisplayType=ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbDisplay")).selectedLabel.toString();
		
		
    	switch (strChartType) { 
		    case "Area" : 
		    	drawAreaChart();
		    	break; 
		    case "Bar" : 
		    	drawBarChart();
		        break; 
		    case "Bubble" : 
		        drawBubbleChart();
		        break; 
		    case "Candlestick" : 
		        drawCandlestickChart();
		        break; 
		    case "Column" : 
		        drawColumnChart();
		        break; 
		    case "HighLowOpenClose" : 
		        drawHLOCChart()
		        break; 
		    case "Line" : 
		    	drawLineChart();
		        break; 
		    case "Pie" : 
		        drawPieChart();
		        break; 
		    case "Plot" : 
		        drawPlotChart();
		        break;
		    case "Radar" : 
		        drawRadarChart();
		        break;
		    case "TreeMap" : 
		        drawTreeMap();
		        break;
		    case "GeoMap" : 
		        drawGeoMap();
		        break; 
		   case "Cartesian" : 
		        drawCartesianChart();
		        break; 
		}
	}
    
    public function createLegend(Chart:Object):void {
    	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
    	var myLegend:Legend = new Legend();
		myLegend.dataProvider = Chart;
		myLegend.direction = "horizontal";
		if(CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkLegend")).selected){
			this.addChild(myLegend);
		}
	}
	
	// Test
	public function createLegend2(Chart:Object, container:VBox):void {
    	accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
    	var myLegend:Legend = new Legend();
		myLegend.dataProvider = Chart;
		myLegend.direction = "horizontal";
		if(CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkLegend")).selected){
			container.addChild(myLegend);
		}
	}
	
	public function addGridLines(Chart:Object):void {
		accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		var bge:GridLines;
		bge = new GridLines();
		bge.setStyle("direction", "both");
		var s:Stroke
		if(CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkGrid")).selected)
		{
			s = new Stroke(0x9BC4E2,1);
			bge.setStyle("horizontalStroke", s);
			bge.setStyle("verticalStroke",s);
						
		}else{
			s = new Stroke(0xFFFFFF,0);
			bge.setStyle("horizontalStroke", s);
			bge.setStyle("verticalStroke",s);
		}
		Chart.backgroundElements =[bge];
	}
	
	public function sortLabel(sField:String):void{
		dataSort=new Sort();
		dataSort.fields=[new SortField(sField,true)];//"@amount"
		dataListCollection.sort=dataSort;
		dataListCollection.refresh();
	}
	
	public function setMinMaxInt(axis:Object,orientation:String):void{
		accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		HBoxMinMaxx=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxx"))
		HBoxMinMaxy=HBox(cnvs.getChildByName("cnvs"+accordionIndex+"_HBoxMinMaxy"))
		if(orientation=="h"){
			if (flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).values[1]!=""){
    			axis.maximum=flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).values[1];
    		}
    		if (flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).values[0]!=""){
    			axis.minimum=flexlib.controls.HSlider(HBoxMinMaxx.getChildByName("cnvs"+accordionIndex+"_minMaxxSlider")).values[0];
    		}
    		if (NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtxInterval1")).value.toString()!=""){
    			axis.interval=NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtxInterval1")).value.toString();
    		}
		}else{
			if (flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).values[1]!=""){
    			axis.maximum=flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).values[1];
    		}
    		if (flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).values[0]!=""){
    			axis.minimum=flexlib.controls.HSlider(HBoxMinMaxy.getChildByName("cnvs"+accordionIndex+"_minMaxySlider")).values[0];
    		}
    		if (NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtyInterval1")).value.toString()!=""){
    			axis.interval=NumericStepper(cnvs.getChildByName("cnvs"+accordionIndex+"_txtyInterval1")).value.toString();
    		}
		}
	}
	
	
    public function setTypeAxis(Chart:Object,AxisType:String,axe:String):void { 
    	switch (AxisType) { 
		    case "Category" : 
		    	var AxisCat:CategoryAxis = new CategoryAxis();
		    	AxisCat.categoryField = xField;
		    	sortLabel(xField);
		    	AxisCat.dataProvider = dataListCollection;//xmlDataModif.children()//xmlData.children();
		    	
		    	if(axe=="h"){
		    		//AxisCat.categoryField=xField;//CategoryxField;
					Chart.horizontalAxis = AxisCat;
		    	}else{
		    		//AxisCat.categoryField=yField;//CategoryyField;
		    		//Chart.verticalAxis = AxisCat;
		    	}
		        break; 
		    case "Linear" : 
		    	var AxisLinear:LinearAxis = new LinearAxis();
		    	setMinMaxInt(AxisLinear,axe);
		    	if(axe=="h"){
					Chart.horizontalAxis = AxisLinear;
		    	}else{
		    		Chart.verticalAxis = AxisLinear;
		    	}
		    	
		        break;
			case "Log" : 
		    	var AxisLog:LogAxis = new LogAxis();
		    	setMinMaxInt(AxisLog,axe);
		    	if(axe=="h"){
					Chart.horizontalAxis = AxisLog;
		    	}else{
		    		Chart.verticalAxis = AxisLog;
		    	}
		        break; 
		    case "DateTime" : 
		    	var AxisDateTime:DateTimeAxis = new DateTimeAxis();
		    	setMinMaxInt(AxisDateTime,axe);
		    	if(axe=="h"){
					Chart.horizontalAxis = AxisDateTime;
		    	}else{
		    		Chart.verticalAxis = AxisDateTime;
		    	}
		        break; 
        }
	}
	
	
	
	public function setSerie(serie:Object,chartType:String, syField:String, num:int):void{
		accordionIndex=leftAccordion.selectedIndex+1
		cnvs=Canvas(leftAccordion.getChildByName("piano"+accordionIndex))
		if(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Pie")
		{
			serie.field=syField;
			serie.nameField=syField;
			serie.setStyle("labelPosition", ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbLabelPosition")).selectedLabel.toString()); 
			
			serie.explodeRadius=HSlider(cnvs.getChildByName("cnvs"+accordionIndex+"_PieExplode")).value//.12
			serie.startAngle=HSlider(cnvs.getChildByName("cnvs"+accordionIndex+"_PieAngle")).value;
		}else if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="HighLowOpenClose"){
			serie.openField=openField;
			serie.closeField=closeField;
			serie.highField=highField;
			serie.lowField=lowField;
		}else if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Cartesian"){
			if(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).selectedLabel.toString()=="Candlestick" || ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).selectedLabel.toString()=="HLOC"){
				serie.openField=openField;
				serie.closeField=closeField;
				serie.highField=highField;
				serie.lowField=lowField;
			}else{
				serie.xField=xField;
				serie.yField=syField;
				serie.displayName = syField.substring(1,syField.length);
			}
		}
		else if (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Radar"){
			serie.dataField=dataField;
			
		}else{
			serie.xField=xField;
			serie.yField=syField;
			serie.displayName = syField.substring(1,syField.length);
		}
		
		if (myChart.chart.(@Type==chartType).Properties.Property.Forms.length() !=0)
		{
		if(ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbChartType")).selectedLabel.toString()=="Cartesian")
			{
				serie.setStyle('form', ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartForm"+num)).text)
			}else{
				serie.setStyle('form', ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbForm")).text);
			}
		}
		
		f=new SolidColor(ColorPicker(cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+num)).selectedColor,1);
			s = new Stroke(ColorPicker(cnvs.getChildByName("cnvs"+accordionIndex+"_cp"+num)).selectedColor,1);
			if(chartType=="Area"){
				serie.setStyle('areaFill',f);
			}else if(chartType=="Line"){
				serie.setStyle('fill',f);
				serie.setStyle('lineStroke',s);
			}else if(chartType=="Candlestick"){
				serie.setStyle('declineFill',f);
				serie.setStyle('stroke',s);
				serie.setStyle('boxStroke',s);
			}else if(chartType=="HighLowOpenClose"){
				serie.setStyle('openTickStroke',s);
				serie.setStyle('stroke',s);
				serie.setStyle('closeTickStroke',s);
			}else{
				serie.setStyle('fill',f);
			}
	}
	
	public function resizeChart(Chart:Object):void{
		Chart.percentHeight=(80*p1.height)/100;
		Chart.percentWidth=(80*p1.width)/100;
	}
	
     public function drawAreaChart():void {
     	var chartVBox:VBox = new VBox();
     	var myAreaSeries:Array=new Array();
    	var myAreaChart:AreaChart;
    	var AreaSerie1:AreaSeries;
	    myAreaChart = new AreaChart();
        myAreaChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myAreaChart.dataProvider=dataListCollection;//xmlDataModif.children()//xmlData.children();//slicedResults;////expenses;
    	myAreaChart.percentWidth=100;
    	myAreaChart.percentHeight=100;
    	
    	
    	if (numberOfSerie[accordionIndex]>1){
    		myAreaChart.type=DisplayType;
    	}
    	
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		AreaSerie1=new AreaSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(AreaSerie1,'Area',yField,num);
			myAreaSeries.push(AreaSerie1);
		}	
		
		// Define the horizontal axis.
       setTypeAxis(myAreaChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myAreaChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");		
		
		myAreaChart.series = myAreaSeries;
		
		resizeChart(chartVBox);
		chartVBox.addChild(myAreaChart);
		
		var podContent:PodContentBase = new PodContentBase();
	  	podContent.addChild(chartVBox);
		var areaPod:Pod = new Pod();
	  	areaPod.addChild(podContent);  
	  	
	  	// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
		//		piePod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				areaPod.id = "areaPod";
				areaPod.title = "Area";
		
		addPod(areaPod, 2, areaPod.id);

		
		// Create a legend.
		createLegend2(myAreaChart, chartVBox);
		addGridLines(myAreaChart);
		}
    
    
    private function drawBarChart():void {
    	var myBarSeries:Array=new Array();
	    var myBarChart:BarChart;
        var barSeries1:BarSeries;
        
        myBarChart = new BarChart();
        myBarChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myBarChart.dataProvider=dataListCollection;//xmlData.children()//"{data.value}";//expenses//"{myAC}";//"{results.value}";//"{myData.lastResult.value}";//expenses;
        
        if (numberOfSerie[accordionIndex]>1){
    		myBarChart.type=DisplayType;
    	}
    	
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		barSeries1=new BarSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(barSeries1,'Bar',yField,num);
			myBarSeries.push(barSeries1);
		}
		
       // Define the horizontal axis.
       setTypeAxis(myBarChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myBarChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");	
		
		myBarChart.series = myBarSeries;
		resizeChart(myBarChart);
		// Attach chart to the display list.
		p1.addChild(myBarChart);
		// Create a legend.
		createLegend(myBarChart);
		addGridLines(myBarChart);
    }
    
    private function drawBubbleChart():void {
    	var myBubbleSeries:Array=new Array();
	    var MyBubbleChart:BubbleChart;
        var Bubbleseries1:BubbleSeries;
     
        MyBubbleChart = new BubbleChart();
        MyBubbleChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        MyBubbleChart.dataProvider=dataListCollection;//xmlData.children()//expenses;
		
		
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		Bubbleseries1=new BubbleSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			rField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num)).selectedLabel.toString();
			setSerie(Bubbleseries1,'Bubble',yField,num);
			Bubbleseries1.radiusField=rField;//"@amount";
			myBubbleSeries.push(Bubbleseries1);
		}
		
	   // Define the horizontal axis.
       setTypeAxis(MyBubbleChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(MyBubbleChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
	   
		
		MyBubbleChart.series = myBubbleSeries;
		resizeChart(MyBubbleChart);
		// Attach chart to the display list.
		p1.addChild(MyBubbleChart);
		// Create a legend.
		createLegend(MyBubbleChart);
		addGridLines(MyBubbleChart);
    }
    
    
    private function drawCandlestickChart():void {
    	var myCandlestickSeries:Array=new Array();
	    var myCandlestickChart:CandlestickChart;
        var CandlestickSeries1:CandlestickSeries;
        
        myCandlestickChart = new CandlestickChart();
        myCandlestickChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myCandlestickChart.dataProvider=dataListCollection;//xmlData.children();
        
       
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		CandlestickSeries1=new CandlestickSeries();
    		highField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).selectedLabel.toString();
    		lowField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
    		openField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).selectedLabel.toString();
    		closeField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).selectedLabel.toString();
			setSerie(CandlestickSeries1,'Candlestick',"",num);
			myCandlestickSeries.push(CandlestickSeries1);
		}
		
       // Define the horizontal axis.
       setTypeAxis(myCandlestickChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myCandlestickChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
		
		myCandlestickChart.series = myCandlestickSeries;
		
		resizeChart(myCandlestickChart);
		// Attach chart to the display list.
		p1.addChild(myCandlestickChart);    
		
		// Create a legend.
		createLegend(myCandlestickChart);  
		addGridLines(myCandlestickChart);
    }
    
    private function drawColumnChart():void {
		var myColumnSeries:Array=new Array();
	    var myColumnChart:ColumnChart;
        var ColumnSeries1:ColumnSeries;
        
        myColumnChart = new ColumnChart();
        myColumnChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myColumnChart.dataProvider=dataListCollection;//xmlData.children();
        
        if (numberOfSerie[accordionIndex]>1){
    		myColumnChart.type=DisplayType;
    	}
    	
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		ColumnSeries1=new ColumnSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(ColumnSeries1,'Column',yField,num);
			myColumnSeries.push(ColumnSeries1);
		}
		
       // Define the horizontal axis.
       setTypeAxis(myColumnChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myColumnChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
		
		myColumnChart.series = myColumnSeries;
		
		resizeChart(myColumnChart);
		// Attach chart to the display list.
		p1.addChild(myColumnChart);    
		
		// Create a legend.
		createLegend(myColumnChart);  
		addGridLines(myColumnChart);
    }
    
    private function drawHLOCChart():void {
    	var myHLOCSeries:Array=new Array();
	    var myHLOCChart:HLOCChart;
        var HLOCSeries1:HLOCSeries;
        
        myHLOCChart = new HLOCChart();
        myHLOCChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myHLOCChart.dataProvider=dataListCollection;//xmlData.children();
        
    	
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		HLOCSeries1=new HLOCSeries();
    		highField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).selectedLabel.toString();
    		lowField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
    		openField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).selectedLabel.toString();
    		closeField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).selectedLabel.toString();
			setSerie(HLOCSeries1,'Candlestick',"",num);
			myHLOCSeries.push(HLOCSeries1);
		}
		
       // Define the horizontal axis.
       setTypeAxis(myHLOCChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myHLOCChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
		
		myHLOCChart.series = myHLOCSeries;
		
		resizeChart(myHLOCChart);
		// Attach chart to the display list.
		p1.addChild(myHLOCChart);    
		
		// Create a legend.
		createLegend(myHLOCChart);  
		addGridLines(myHLOCChart);
    }
    
    private function drawLineChart():void {
    	var myLineSeries:Array=new Array();
		var MyLineChart:LineChart;
		var LineSeries1:LineSeries;
		
		MyLineChart = new LineChart();
        MyLineChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        MyLineChart.dataProvider=dataListCollection;//xmlData.children();//expenses;
    	
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		LineSeries1=new LineSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(LineSeries1,'Line',yField,num);
			myLineSeries.push(LineSeries1);
		}
		
       // Define the horizontal axis.
       setTypeAxis(MyLineChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(MyLineChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
		
		MyLineChart.series = myLineSeries;
		
		resizeChart(MyLineChart);
		// Attach chart and legend to the display list.
		p1.addChild(MyLineChart);
		
		// Create a legend.
		createLegend(MyLineChart);
		addGridLines(MyLineChart);
    }

    
    private function drawPieChart():void {
    	
    	var chartVBox:VBox = new VBox();
    	var myPieSeries:Array=new Array();
		var MyPieChart:PieChart;
		var PieSeries1:PieSeries;
		
		MyPieChart = new PieChart();
        MyPieChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        MyPieChart.dataProvider=dataListCollection;//xmlData.children();//expenses;
        MyPieChart.percentHeight=100;
        MyPieChart.percentWidth=100;
    	
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		PieSeries1=new PieSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(PieSeries1,'Pie',yField,num);
			//PieSeries1.startAngle=PieAngleSlider.value;
			myPieSeries.push(PieSeries1);
		}
		MyPieChart.setStyle("innerRadius", HSlider(cnvs.getChildByName("cnvs"+accordionIndex+"_PieDonuts")).value.toString()); 
       	MyPieChart.series = myPieSeries;
		resizeChart(MyPieChart);
		// Attach chart and legend to the display list.
		// p1.addChild(MyPieChart);
		resizeChart(chartVBox);
		chartVBox.addChild(MyPieChart);
		
		var podContent:PodContentBase = new PodContentBase();
	  	podContent.addChild(chartVBox);
		var piePod:Pod = new Pod();
	  	piePod.addChild(podContent);  
	  	
	  	// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
		//		piePod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				piePod.id = "piePod";
				piePod.title = "Pie";
		
		addPod(piePod, 0, piePod.id);

		
		// Create a legend.
		createLegend2(MyPieChart, chartVBox);
    }
    
    private function drawPlotChart():void {
	    
	    var chartVBox:VBox = new VBox();
	    
	    var myPlotSeries:Array=new Array();
		var myPlotChart:PlotChart;
        var PlotSeries1:PlotSeries;
        myPlotChart = new PlotChart();
        myPlotChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myPlotChart.dataProvider=dataListCollection;//xmlData.children();
        myPlotChart.percentHeight=100;
        myPlotChart.percentWidth=100;
        
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		PlotSeries1=new PlotSeries();
    		yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(PlotSeries1,'Plot',yField,num);
			myPlotSeries.push(PlotSeries1);
		}
		
       // Define the horizontal axis.
       setTypeAxis(myPlotChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myPlotChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
	
		myPlotChart.series = myPlotSeries;
		
		resizeChart(chartVBox);
		chartVBox.addChild(myPlotChart);
					
		var podContent:PodContentBase = new PodContentBase();
	  	podContent.addChild(chartVBox);
		var plotPod:Pod = new Pod();
	  	plotPod.addChild(podContent);  
	  	
	  	// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
		//		plotPod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				plotPod.id = "plotPod";
				plotPod.title = "PlotChart";
		
		
		addPod(plotPod, 1, plotPod.id);
		
		
		// Create a legend.
		createLegend2(myPlotChart, chartVBox);   
		addGridLines(myPlotChart); 
    }
       
	// The following are ILOG Chart Components
	    
    private function drawRadarChart():void {
	// ILOG component
    
    /*
    <ilog:RadarChart dataProvider="{temperature}">
   <ilog:angularAxis>
     <ilog:AngularAxis categoryField="Month" displayName="Month"/>
   </ilog:angularAxis>
   <ilog:radialAxis>
     <mx:LinearAxis  displayName="Temperature (ËF)"/>
   </ilog:radialAxis>
   <ilog:series>
     <series:RadarLineSeries dataField="London" displayName="London"/>
     <series:RadarLineSeries dataField="Sydney" displayName="Sydney"/>
   </ilog:series>
</ilog:RadarChart>
*/
        var chartVBox:VBox = new VBox();
	    
	    var myRadarLineSeries:Array=new Array();
	    var myRadarBubbleSeries:Array=new Array();
	    var myRadarPlotSeries:Array=new Array();
	    var myRadarColumnSeries:Array=new Array();
	    
		var myRadarChart:RadarChart;
        var RadarLineSeries1:RadarLineSeries = new RadarLineSeries();
        var RadarBubbleSeries1:RadarBubbleSeries = new RadarBubbleSeries();
        var RadarPlotSeries1:RadarPlotSeries = new RadarPlotSeries();
        var RadarColumnSeries1:RadarColumnSeries = new RadarColumnSeries();
        
        var angularAxis1:AngularAxis = new AngularAxis();
        var radialAxis1:LinearAxis = new LinearAxis();
        
        angularAxis1.categoryField="@nodeType";
         
        RadarLineSeries1.dataField="@nodeId";
        myRadarLineSeries.push(RadarLineSeries1);
        
        myRadarChart = new RadarChart();
        myRadarChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myRadarChart.dataProvider=dataListCollection;//xmlData.children();
        myRadarChart.percentHeight=100;
        myRadarChart.percentWidth=100;
        myRadarChart.angularAxis = angularAxis1;
        myRadarChart.radialAxis = radialAxis1;
        myRadarChart.series = myRadarLineSeries;   
        
        /*
        for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		RadarLineSeries1=new RadarLineSeries();
    		dataField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(RadarLineSeries1,'Radar',dataField,num);
			myRadarLineSeries.push(RadarLineSeries1);
		}
		*/
		
       // Define the Angular axis.
       // setTypeAxis(myRadarChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the Radial axis.
	   // setTypeAxis(myRadarChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
	
		
		
		resizeChart(chartVBox);
		chartVBox.addChild(myRadarChart);
					
		var podContent:PodContentBase = new PodContentBase();
	  	podContent.addChild(chartVBox);
		var radarPod:Pod = new Pod();
	  	radarPod.addChild(podContent);  
	  	
	  	// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
		//		plotPod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				radarPod.id = "radarPod";
				radarPod.title = "RadarChart";
		
		
		addPod(radarPod, 3, radarPod.id);
		
		
		// Create a legend.
		createLegend2(myRadarChart, chartVBox);   
		// addGridLines(myRadarChart);
    	    			
    }
    
    private function drawTreeMap():void {
    // ILOG component	
    
    var myTreeMap:TreeMap = new TreeMap();
	        
	    myTreeMap = new TreeMap();
        myTreeMap.dataProvider=new HierarchicalData(myTreeData);//xmlData.children();
        
        myTreeMap.algorithm="squarified";
        myTreeMap.areaField="@id";
        myTreeMap.colorField="@id";
        myTreeMap.labelField="@name";
        myTreeMap.labelThreshold=2;
        myTreeMap.setStyle('colorScheme', "div-green-red");
        myTreeMap.setStyle('topMarginProportion', 0.2);
        myTreeMap.setStyle('backgroundColor', 0xFFFFFF);
        myTreeMap.setStyle('textBackgroundColor', 0xFFFFFF);
        myTreeMap.setStyle('borderColor', 0x000000);
		myTreeMap.setStyle('borderThickness', 1);
		myTreeMap.setStyle('backgroundColor', 0xFFFFFF);
	
        /*
        for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
    		RadarLineSeries1=new RadarLineSeries();
    		dataField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
			setSerie(RadarLineSeries1,'Radar',dataField,num);
			myRadarLineSeries.push(RadarLineSeries1);
		}
		*/
       
		
		resizeChart(myTreeMap);
					
		var podContent:PodContentBase = new PodContentBase();
	  	podContent.addChild(myTreeMap);
		var treeMapPod:Pod = new Pod();
	  	treeMapPod.addChild(podContent);  
	  	
	  	// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
		//		plotPod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				treeMapPod.id = "treeMapPod";
				treeMapPod.title = "TreeMap";
		
		
		addPod(treeMapPod, 6, treeMapPod.id);	
    }
    
    private function drawGeoMap():void {
    // ILOG component
    
	        
      // Create a map of World Countries.
      var myGeoMap:WorldCountriesMap = new WorldCountriesMap();
      
      // myGeoMap.allowNavigation=true;
  	  // myGeoMap.zoomableSymbols=true;
  	  
  	  // myGeoMap.setStyle('backgroundFill', 0xFFFFFF);
  	  // myGeoMap.setStyle('fill', 0xFFFFFF);
  	  // myGeoMap.setStyle('highlightStroke', 0x000000);
  	  // myGeoMap.setStyle('stroke', 0x000000);
  	  
  	  // myGeoMap.percentHeight=100;
  	  // myGeoMap.percentWidth=100;
  	  			
		var podContent:PodContentBase = new PodContentBase();
	  	podContent.addChild(myGeoMap);
		var mapPod:Pod = new Pod();
	  	mapPod.addChild(podContent);  
	  	
	  	// Listen for the last pod to complete so the layout from the ContainerWindowManager is done correctly. 
		//		mapPod.addEventListener(FlexEvent.UPDATE_COMPLETE, onCreationCompletePod);
				mapPod.id = "mapPod";
				mapPod.title = "GeoMap";
		
		resizeChart(myGeoMap);
		addPod(mapPod, 4, mapPod.id);
	  
    }
	
	// End ILOG Chart Components
	
   	private function drawCartesianChart():void{
   		var myCartesianSeries:Array=new Array();
    	var myCartesianChart:CartesianChart;
    	
    	myCartesianChart = new CartesianChart();
        myCartesianChart.showDataTips = CheckBox(cnvs.getChildByName("cnvs"+accordionIndex+"_chkDataType")).selected;
        myCartesianChart.dataProvider=dataListCollection;//xmlDataModif.children()//xmlData.children();//slicedResults;////expenses;
    	for (num=1; num<=numberOfSerie[accordionIndex]; num++) {
			yField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
				
			switch (ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCartSerie"+num)).selectedLabel.toString()) { 
		    case "Area" : 
		    	var cartAreaSerie:AreaSeries;
		    	cartAreaSerie=new AreaSeries();
		    	setSerie(cartAreaSerie,'Area',yField,num);
				myCartesianSeries.push(cartAreaSerie);
		    	break; 
		    case "Bar" : 
		    	var cartBarSerie:BarSeries;
		    	cartBarSerie=new BarSeries();
		    	setSerie(cartBarSerie,'Bar',yField,num);
				myCartesianSeries.push(cartBarSerie);
		        break; 
		    case "Bubble" : 
		        var cartBubbleSerie:BubbleSeries;
		    	cartBubbleSerie=new BubbleSeries();
		    	rField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbRadius"+num)).selectedLabel.toString();
		    	setSerie(cartBubbleSerie,'Bubble',yField,num);
					cartBubbleSerie.radiusField=rField;
					myCartesianSeries.push(cartBubbleSerie);
		        break; 
		    case "Candlestick" : 
		        var cartCandlestickSerie:CandlestickSeries;
		    	cartCandlestickSerie=new CandlestickSeries();
		    	highField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).selectedLabel.toString();
	    		lowField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
	    		openField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).selectedLabel.toString();
	    		closeField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).selectedLabel.toString();
		    	setSerie(cartCandlestickSerie,'Candlestick',"",num);
				myCartesianSeries.push(cartCandlestickSerie);
		        break; 
		    case "Column" : 
		        var cartColumnSerie:ColumnSeries;
		    	cartColumnSerie=new ColumnSeries();
		    	setSerie(cartColumnSerie,'Column',yField,num);
				myCartesianSeries.push(cartColumnSerie);
		        break; 
		    case "HLOC" : 
		        var cartHLOCSerie:HLOCSeries;
		    	cartHLOCSerie=new HLOCSeries();
		    	highField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxis"+num)).selectedLabel.toString();
	    		lowField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxis"+num)).selectedLabel.toString();
	    		openField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbOpenField"+num)).selectedLabel.toString();
	    		closeField="@"+  ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbCloseField"+num)).selectedLabel.toString();
		    	setSerie(cartHLOCSerie,'HighLowOpenClose',yField,num);
				myCartesianSeries.push(cartHLOCSerie);
		        break; 
		    case "Line" : 
		    	var cartLineSerie:LineSeries;
		    	cartLineSerie=new LineSeries();
		    	setSerie(cartLineSerie,'Line',yField,num);
				myCartesianSeries.push(cartLineSerie);
		        break; 
		    case "Plot" : 
		        var cartPlotSerie:PlotSeries;
		    	cartPlotSerie=new PlotSeries();
		    	setSerie(cartPlotSerie,'Plot',yField,num);
				myCartesianSeries.push(cartPlotSerie);
		        break;
		     
		}
	    		
			}
		
		// Define the horizontal axis.
       setTypeAxis(myCartesianChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbxAxisType1")).text,"h");
	   // Define the vertical axis.
	   setTypeAxis(myCartesianChart,ComboBox(cnvs.getChildByName("cnvs"+accordionIndex+"_cbyAxisType1")).text,"v");
	   
	   
		myCartesianChart.series = myCartesianSeries;
		
		resizeChart(myCartesianChart);
		p1.addChild(myCartesianChart);
		
		createLegend(myCartesianChart);   
		addGridLines(myCartesianChart);
   	}
    
    
    public function sliceResults(): void {
		
		/*var minSlider:int=int(minMaxySlider.values[0])
		var maxSlider:int=int(minMaxySlider.values[1])
		var newRootXml:XML = <root/>;
		
		for (var i:int = 0; i < dataList.length(); i++) 
		{ 
			var eachProduct:XML = dataList[i];
			
			if((i>minSlider) && (i<maxSlider)){
				Alert.show(eachProduct.toXMLString(), 'Alert Box',mx.controls.Alert.OK);
				newRootXml.appendChild(eachProduct);
			}
		} 
		dataList=newRootXml.children();
		dataListCollection=new XMLListCollection(dataList);
		dataListCollection.refresh();
		//Alert.show(dataList.toString(), 'Alert Box',mx.controls.Alert.OK);
		*/
		refreshChart();
    }
    
  /* function getDataTip(obj) {
            var item=obj.hitData.item;
            return "<b>"+item.month+"</b><br>Profit: "+item.profit+"<br>Expenses: "+item.expenses+"<br>Amount: "+item.amount;
        }*/
        
        private function degrees_func(item:Number):String {
                return item + String.fromCharCode(176);
                
            }

]]>
</mx:Script>

	<!-- Effects -->
	<mx:WipeLeft id="wipeLeft" duration="1000" />
	<mx:WipeRight id="wipeRight" duration="1000" />
	
	<mx:Number id="numberItems"/>
	<mx:Number id="maxxSlideValue"/>
	<mx:Number id="maxxSlideDefault"/>
	<mx:Number id="maxySlideValue"/>
	<mx:Number id="maxySlideDefault"/>
	<mx:HBox id="DivNavRB" width="100%" height="100%" paddingBottom="5" horizontalGap="5" y="1" x="0">
		<mx:HBox id="sideBar" width="300" height="100%" horizontalGap="0" >
	<ui:Grip id="navGrip" 
				width="17" height="100%" horizontalAlign="center"
				gripTip="Show/Hide Control Panel" />
	<mx:VBox id="NavContainerRB" horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalAlign="middle" horizontalAlign="center" verticalGap="1" horizontalGap="0" width="100%" height="100%" hideEffect="{wipeLeft}" showEffect="{wipeRight}">
	<mx:Accordion id="leftAccordion" headerRenderer="org.un.birdeye.measure.renderers.HeaderRenderer" paddingBottom="5" paddingRight="5" paddingTop="5" paddingLeft="5" width="100%" height="100%" creationPolicy="all"  >
					
	<mx:Canvas id="piano1" height="100%" width="100%" label="Chart Builder 1"  >
		<mx:Label id="cnvs1_lblChartType" name="cnvs1_lblChartType" x="2" y="10" text="Chart type :"/>
		<mx:ComboBox id="cnvs1_cbChartType" name="cnvs1_cbChartType" dataProvider="{myChart.chart.@Type}" change="changeTypeEvt(event);"   x="73" y="8"  width="160"/>
		<mx:Label id="cnvs1_lblForm" name="cnvs1_lblForm" x="3" y="36" text="Form :"/>
		<mx:ComboBox id="cnvs1_cbForm" name="cnvs1_cbForm" x="73" y="34" change="refreshChartEvent(event);"/>
		<mx:HRule x="13" y="89" width="210"/>
		<mx:Label x="3" y="165" text="Serie 1 :" width="139" id="cnvs1_lblSelectData" name="cnvs1_lblSelectData" />
		
			<mx:Label x="3" y="188" text="xAxis :" name="cnvs1_lblxAxis1" id="cnvs1_lblxAxis1"/>
			<mx:ComboBox x="73" y="186" id="cnvs1_cbxAxis1" name="cnvs1_cbxAxis1" change="refreshChartEvent(event);"/>
			
			<mx:Label x="3" y="270" text="yAxis :" name="cnvs1_lblyAxis1" id="cnvs1_lblyAxis1"/>
			<mx:ComboBox x="73" y="268" name="cnvs1_cbyAxis1" id="cnvs1_cbyAxis1" change="refreshChartEvent(event);"/>
			<mx:Label x="3" y="214" text="xAxisType :" name="cnvs1_lblxAxisType1" id="cnvs1_lblxAxisType1"/>
			<mx:ComboBox x="73" y="213" name="cnvs1_cbxAxisType1" id="cnvs1_cbxAxisType1" change="xAxisTypeChange(event);"/><!--change="xAxisTypeChange(event);"-->
			<mx:Label x="3" y="297" name="cnvs1_lblyAxisType1" id="cnvs1_lblyAxisType1" text="yAxixType :"/>
			<mx:ComboBox x="73" y="295" name="cnvs1_cbyAxisType1" id="cnvs1_cbyAxisType1" change="yAxisTypeChange(event);"/><!--change="yAxisTypeChange(event);"-->
		
		<mx:HRule x="13" y="161" width="210" height="1"/>
		<mx:CheckBox x="10" y="95" label="Show DataTips" id="cnvs1_chkDataType" name="cnvs1_chkDataType" enabled="true" selected="true" click="refreshChartEvent(event);" />
		<mx:CheckBox x="10" y="117" label="Show Legend" id="cnvs1_chkLegend" name="cnvs1_chkLegend" enabled="true" selected="true" click="refreshChartEvent(event);" />
		<mx:CheckBox x="10" y="139" label="Show Grid" id="cnvs1_chkGrid" name="cnvs1_chkGrid" enabled="true" selected="false" click="refreshChartEvent(event);" />
		<mx:ColorPicker id="cnvs1_cp1" name="cnvs1_cp1" x="53" y="166" selectedColor="0x6699CC" change="refreshChartEvent(event);"  width="17" height="17"/>
		<mx:ComboBox id="cnvs1_cbCartSerie1" name="cnvs1_cbCartSerie1" change="refreshCartChartEvent(event);" prompt="Select..." x="73" y="163"/>
		<mx:Label id="cnvs1_lblCatForm1" name="cnvs1_lblCatForm1" x="3" y="370" text="Form :" visible="false"/>
		<mx:ComboBox id="cnvs1_cbCartForm1" name="cnvs1_cbCartForm1" change="refreshChartEvent(event);" visible="false" x="73" y="368"/>
		<mx:Label id="cnvs1_lblRadius1" name="cnvs1_lblRadius1" x="3" y="370" text="Radius :" visible="false"/>
		<mx:ComboBox id="cnvs1_cbRadius1" name="cnvs1_cbRadius1" change="refreshChartEvent(event);" visible="false" x="73" y="368"/>
		
		<mx:Label x="3" y="62" text="Display :" id="cnvs1_lblDisplay" name="cnvs1_lblDisplay" visible="false"/>
		<mx:ComboBox x="73" y="60" id="cnvs1_cbDisplay" name="cnvs1_cbDisplay" change="refreshChartEvent(event);" visible="false"/>
		
		<mx:Label x="150" y="232" text="Interval" name="cnvs1_lblxInterval1" id="cnvs1_lblxInterval1" visible="false"/>
		<mx:NumericStepper x="197" y="230" width="36" name="cnvs1_txtxInterval1" id="cnvs1_txtxInterval1" visible="false" change="refreshChartEvent(event);" />
		<mx:HBox name="cnvs1_HBoxMinMaxx" id="cnvs1_HBoxMinMaxx" width="100%" x="4" y="248" >
		<mx:Label text="min" name="cnvs1_lblxMin1" id="cnvs1_lblxMin1" visible="false"/>	
		
		
		<flexlib:HSlider  id="cnvs1_minMaxxSlider" name="cnvs1_minMaxxSlider" 
							trackHighlightSkin="flexlib.skins.SliderThumbHighlightSkin"
							allowTrackClick="true" allowThumbOverlap="true" 
							liveDragging="true" 
							showDataTip="true"  dataTipPlacement="bottom" dataTipOffset="3"
							showTrackHighlight="true"
							thumbCount="2"  width="100%" change="refreshChartEvent(event);"
							snapInterval=".1" visible="false"  maximum="{maxxSlideValue}" 
							values="{[0, maxxSlideDefault]}"
							
						/>
		<mx:Label text="max" name="cnvs1_lblxMax1" id="cnvs1_lblxMax1" visible="false"/>
		</mx:HBox>
		
		
		<mx:Label x="150" y="324" text="Interval" name="cnvs1_lblyInterval1" id="cnvs1_lblyInterval1" visible="false"/>
		<mx:NumericStepper x="197" y="322" width="36" name="cnvs1_txtyInterval1" id="cnvs1_txtyInterval1" visible="false" change="refreshChartEvent(event);" />
		<!-- This is best to use for setting the min and max values -->
		<mx:HBox name="cnvs1_HBoxMinMaxy" id="cnvs1_HBoxMinMaxy" width="100%" x="4" y="345" >
		<mx:Label text="min" name="cnvs1_lblyMin1" id="cnvs1_lblyMin1" visible="false"/>	
		
		<flexlib:HSlider  id="cnvs1_minMaxySlider" 
							name="cnvs1_minMaxySlider"
							trackHighlightSkin="flexlib.skins.SliderThumbHighlightSkin"
							allowTrackClick="true" allowThumbOverlap="true" 
							liveDragging="true" 
							showDataTip="true"  dataTipPlacement="bottom" dataTipOffset="3"
							showTrackHighlight="true"
							thumbCount="2"  width="100%" change="refreshChartEvent(event);"
							snapInterval=".1" visible="false" minimum="0" maximum="{maxySlideValue}" 
							values="{[0, maxySlideDefault]}"
							
						/>
		<mx:Label text="max" name="cnvs1_lblyMax1" id="cnvs1_lblyMax1" visible="false"/>
		</mx:HBox>
		<mx:HRule x="13" y="430" width="210" id="cnvs1_hrEnd" name="cnvs1_hrEnd"/>
		<mx:Button x="73" y="440" label="Add new Serie" id="cnvs1_btnAddNewSerie" name="cnvs1_btnAddNewSerie" click="addSeries(event)"/>
		<mx:Label text="Distance of Separation" id="cnvs1_lblExplode" name="cnvs1_lblExplode" fontSize="9" textAlign="center" x="3" y="317" width="100%" visible="false" />
	   <flexlib:HSlider  id="cnvs1_PieExplode" name="cnvs1_PieExplode"
							trackHighlightSkin="flexlib.skins.SliderThumbHighlightSkin"
							allowTrackClick="true" allowThumbOverlap="false" 
							liveDragging="true" 
							showDataTip="true"  dataTipPlacement="bottom" dataTipOffset="3"
							showTrackHighlight="true"
							thumbCount="1"  width="100%" change="refreshChartEvent(event);"
							snapInterval=".01" visible="false" minimum="0" maximum="1" 
							values="0" x="3" y="324" 
							
						/>
		<mx:Label text="Angle of rotation" id="cnvs1_lblAngle" name="cnvs1_lblAngle" fontSize="9" textAlign="center" x="3" y="339" width="100%" visible="false" />
		<flexlib:HSlider  id="cnvs1_PieAngle" name="cnvs1_PieAngle"
							trackHighlightSkin="flexlib.skins.SliderThumbHighlightSkin"
							allowTrackClick="true" allowThumbOverlap="false" 
							liveDragging="true" 
							showDataTip="true"  dataTipPlacement="bottom" dataTipOffset="3"
							showTrackHighlight="true"
							thumbCount="1"  width="100%" change="refreshChartEvent(event);"
							snapInterval="1" visible="false" minimum="0" maximum="360" 
							values="0" x="3" y="345" dataTipFormatFunction="degrees_func"
						/>   
	
		<mx:Label text="Donuts" id="cnvs1_lblDonuts" name="cnvs1_lblDonuts" fontSize="9" textAlign="center" x="3" y="361" width="100%" visible="false" />
		<flexlib:HSlider  id="cnvs1_PieDonuts" name="cnvs1_PieDonuts"
							trackHighlightSkin="flexlib.skins.SliderThumbHighlightSkin"
							allowTrackClick="true" allowThumbOverlap="false" 
							liveDragging="true" 
							showDataTip="true"  dataTipPlacement="bottom" dataTipOffset="3"
							showTrackHighlight="true"
							thumbCount="1"  width="100%" change="refreshChartEvent(event);"
							snapInterval="0.01" visible="false" minimum="0" maximum="1" 
							values="0" x="3" y="368" 
						/>  
						        
    <mx:Label x="3" y="297" name="cnvs1_lblLabelPosition" id="cnvs1_lblLabelPosition" text="Label position :" visible="false"/>
	<mx:ComboBox x="95" y="295" name="cnvs1_cbLabelPosition" id="cnvs1_cbLabelPosition" change="refreshChartEvent(event);" visible="false"/>
	
	<mx:Label x="3" y="375" text="Open :" width="55" name="cnvs1_lblOpenField1" id="cnvs1_lblOpenField1" visible="false"/>
	<mx:ComboBox x="73" y="373" id="cnvs1_cbOpenField1" name="cnvs1_cbOpenField1" change="refreshChartEvent(event);" visible="false"/>
	<mx:Label x="3" y="398" text="Close :" width="55" name="cnvs1_lblCloseField1" id="cnvs1_lblCloseField1" visible="false"/>
	<mx:ComboBox x="73" y="396" id="cnvs1_cbCloseField1" name="cnvs1_cbCloseField1" change="refreshChartEvent(event);" visible="false"/>
   
	</mx:Canvas>
	
	</mx:Accordion>
	</mx:VBox>
	</mx:HBox>
	
	<mx:Canvas id="p1" borderStyle="solid" borderColor="#CCCCCC" width="100%" height="100%" 
		horizontalScrollPolicy="off" verticalScrollPolicy="off" 
		  >
	
	</mx:Canvas>	
	</mx:HBox>

<mx:states>
       <mx:State name="showCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="300"/>
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="5"/>
       </mx:State>        
		<mx:State name="hideCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="17"/>
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="0"/>
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{sideBar}" />
		</mx:Transition>
	</mx:transitions>


</mx:Canvas>