<?xml version="1.0" encoding="utf-8"?>

<!--
 * The MIT License
 *
 * Copyright (c) 2008
 * United Nations Office at Geneva
 * Center for Advanced Visual Analytics
 * http://cava.unog.ch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 -->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:vg="http://www.adobe.com/2006/fc"
	xmlns:un="org.un.flex.graphLayout.visual.*"
	creationComplete="init();" width="100%" height="100%" >

	<mx:Script>
		<![CDATA[

       		import org.un.flex.graphLayout.data.INode;
			import org.un.flex.graphLayout.data.IGraph;
			import org.un.flex.graphLayout.data.Graph;			
			import org.un.flex.graphLayout.visual.VisualNode;
			import org.un.flex.graphLayout.visual.IVisualNode;
			import org.un.flex.graphLayout.visual.IVisualGraph;
			import org.un.flex.graphLayout.visual.IEdgeRenderer;
			import org.un.flex.graphLayout.layout.ILayoutAlgorithm;
			import org.un.flex.graphLayout.layout.HierarchicalLayouter;
			import org.un.flex.graphLayout.visual.DefaultEdgeRenderer;
			import org.un.flex.graphLayout.visual.DirectedEdgeRenderer;
			import org.un.flex.graphLayout.visual.OrthogonalEdgeRenderer;
			import org.un.flex.graphLayout.visual.FlowEdgeRenderer;
			import org.un.flex.graphLayout.visual.VisualGraph;
			import org.un.cava.birdeye.visualize.renderers.nodes.basicNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.basicEdgeRenderer;

			private var graph:IGraph;
			private var layouter:ILayoutAlgorithm;
			private var selectedEdgeRenderer:IEdgeRenderer;
			private var startRoot:IVisualNode;
			private var itemCount:int = 0;
			private var initDone:Boolean = false;
			private var xmlNames:Array;

			/* Init function, initiates the HTTP
			 * request. All further initalisation is done
			 * in the event handler for the HTTP Service */

			private function init():void {
				
				initData(['Node','Edge','fromID','toID']);
								
			}
			
			/**
			 * event handler for HTTPService, does all the remaining required
			 * initialisation */
			private function initData(xN:Array):void {
				
				xmlNames = xN;
				
				/* init a graph object with the XML data */
				graph = new org.un.flex.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata,xmlNames);
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items */
				vgraph.graph = graph;

				/* set the default layouter type */
				layouter = new HierarchicalLayouter(vgraph);
				
				// layouter = new ParentCenteredRadialLayouter(vgraph);
				// layouter = new CircularLayouter(vgraph);
				// layouter = new PhylloTreeLayouter(vgraph);
				// layouter = new HierarchicalLayouter(vgraph);
				// layouter = new DirectPlacementLayouter(vgraph);
				// layouter = new ForceDirectedLayouter(vgraph);
				// layouter = new SpringForceDirectedLayouter(vgraph);
				
				vgraph.layouter = layouter;
				
				/* set autofit */
				layouter.autoFitEnabled = true;
				
				/* set the layouter */
				vgraph.edgeRenderer = new DefaultEdgeRenderer;
				
				/* set the visibility limit options, default 2 */
				vgraph.maxVisibleDistance = 2;
				
				/* select a root node, most layouters requires a root node */
				startRoot = graph.nodeByStringId("1").vnode;
						
				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = true;

				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;
				initDone = true;
			}
			
			private function setOrientation():void {
				var or:String;
				if(layouter is HierarchicalLayouter) {
					or = orientationSelector.selectedItem as String;
					switch(or) {
						case "Top Down":
							(layouter as HierarchicalLayouter).orientation = 
								(layouter as HierarchicalLayouter).ORIENT_TOP_DOWN;
							break;
						case "Bottom Up":
							(layouter as HierarchicalLayouter).orientation = 
								(layouter as HierarchicalLayouter).ORIENT_BOTTOM_UP;
							break;
						case "Left-Right":
							(layouter as HierarchicalLayouter).orientation = 
								(layouter as HierarchicalLayouter).ORIENT_LEFT_RIGHT;
							break;
						case "Right-Left":
							(layouter as HierarchicalLayouter).orientation = 
								(layouter as HierarchicalLayouter).ORIENT_RIGHT_LEFT;
							break;
						default:
							throw Error("Illegal orientation selected:"+or);
							break;
					}
					layouter.layoutChanged = true;
					vgraph.draw();
				}
			}
			
				
 			/**
 			 * handle a resize event, but only do anything if the init was
 			 * done
 			 */
 			private function handleResize():void {
 				if(initDone) {
 					vgraph.draw();
 					
 				}
 			}
 		
		]]>
	</mx:Script>					

	<mx:Style source="org/un/cava/birdeye/style/css/main.css" />
	
	<mx:Panel id="main" title="Hierarchical Layout" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center" borderColor="#CCCCCC" paddingBottom="5" horizontalGap="5">
		
		<!-- Graph Panel -->
		<mx:Canvas id="graphCnvs" width="100%" height="100%"  >		
			<un:VisualGraph id="vgraph" width="100%" height="100%" 
				paddingBottom="5" left="0" right="0" top="0" bottom="0" backgroundColor="#FFFFFF" alpha="1"
				itemRenderer="org.un.cava.birdeye.visualize.renderers.nodes.basicNodeRenderer" 
				edgeLabelRenderer="org.un.cava.birdeye.visualize.renderers.edges.basicEdgeRenderer"
				resize="handleResize()"
				visibilityLimitActive="true"
				>
			</un:VisualGraph>
		<mx:ComboBox id="orientationSelector" height="20" color="#666666" width="200" top="5" right="5" prompt="Select the orientation" toolTip="Select the orientation of tree layout" change="setOrientation()" >
				<mx:ArrayCollection>
					<mx:String>Top Down</mx:String>
					<mx:String>Bottom Up</mx:String>
					<mx:String>Left-Right</mx:String>
					<mx:String>Right-Left</mx:String>
				</mx:ArrayCollection>
		</mx:ComboBox>	
		<mx:Label text="Double Click Node to Traverse Graph" bottom="0" right="5" />
		</mx:Canvas>
		<!-- End of Graph Panel -->
	</mx:Panel>

<mx:XML id="xmldata" source="data/graph.xml" />

</mx:Application>
