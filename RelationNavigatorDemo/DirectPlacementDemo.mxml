<?xml version="1.0" encoding="utf-8"?>


<!--
 * The MIT License
 *
 * Copyright (c) 2007 The SixDegrees Project Team
 * (Jason Bellone, Juan Rodriguez, Segolene de Basquiat, Daniel Lang).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 -->
		
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:un="org.un.flex.graphLayout.visual.*"
	xmlns:ui="org.un.flex.unComponentToolbox.ui.*"
	xmlns:pr="org.un.flex.unComponentToolbox.renderers.*"
	xmlns:img="org.un.flex.unComponentToolbox.icons.EmbeddedIcons"
	xmlns:pi="com.flexibleexperiments.primitiveIcons.*"
	creationComplete="init()" width="100%" height="100%" viewSourceURL="http://flexvizgraphlib.googlecode.com/svn/trunk/RelationNavigatorDemo/bin/srcview/index.html">

	<mx:Style source="/css/main.css" />					

	<mx:Script>
		<![CDATA[
			import org.un.flex.graphLayout.visual.FlowEdgeRenderer;
			import org.un.flex.graphLayout.visual.DefaultEdgeRenderer;
			import org.un.flex.graphLayout.visual.OrthogonalEdgeRenderer;
			import org.un.flex.graphLayout.visual.DirectedEdgeRenderer;
			import org.un.flex.graphLayout.visual.IEdgeRenderer;
			import org.un.flex.graphLayout.data.IGTree;
			import mx.core.IDataRenderer;
			import mx.core.UIComponent;
			import org.un.flex.graphLayout.data.Graph;			
			import mx.rpc.events.ResultEvent;			
			import mx.collections.ArrayCollection;
			import mx.utils.ArrayUtil;
        	import mx.collections.XMLListCollection;
			import flash.events.*;
        	import mx.events.ItemClickEvent;    
			
			import org.un.flex.graphLayout.data.INode;
			import org.un.flex.graphLayout.visual.VisualNode;
			import org.un.flex.graphLayout.visual.IVisualNode;
			import org.un.flex.graphLayout.visual.IVisualGraph;
			import org.un.flex.graphLayout.layout.ILayoutAlgorithm;
			import org.un.flex.graphLayout.data.IGraph;
			import org.un.flex.graphLayout.layout.DirectPlacementLayouter;
			import org.un.flex.graphLayout.visual.VisualGraph;
			import org.un.flex.unComponentToolbox.renderers.PrimitiveIconRenderer;
			import org.un.flex.unComponentToolbox.icons.EmbeddedIcons;
			
			private var graph:IGraph;
			private var layouter:ILayoutAlgorithm;
			
			//private var currNode:IVisualNode;
			//private var prevNode:IVisualNode;
			private var startRoot:IVisualNode;
			private var itemCount:int = 0;

			private var initDone:Boolean = false;
			
			/* public attributes */
			[Bindable]
			public var scaleFactor:Number = 1;
			
			/* array collection to hold the XML data in order
			 * to allow searching and filtering */
			[Bindable]
			public var myData:ArrayCollection;
			public var selectedNodeID:String;
		
			/* methods */
		
		
		
		
			/* Init function, initiates the HTTP
			 * request. All further initalisation is done
			 * in the event handler for the HTTP Service */
			private function init():void {
				SixDegreesExternalData.send();
				//initData(['Node','Edge','fromID','toID']);
				leftAccordion.selectedIndex = 0;
			}
			
			private function handleHTTPResult(xmlNames:Array, event:ResultEvent):void {
				var xmldata:XML;
				xmldata = (event.result as XML);
				initData(xmlNames, xmldata);
			}
			
			/**
			 * event handler for HTTPService,
			 * reads the data and inits the Graph object.
			 * calls initVGraph for the rest of the initialisation.
			 * */
			private function initData(xmlNames:Array, xmldata:XML = null):void {
				
				/* first load the data into our array collection */
				initLocalData(xmldata.elements());
				
				/* init a graph object with the XML data */
				graph = new org.un.flex.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata,xmlNames);
				
				initVGraph();
			}
				
			/**
			 * initialise the vgraph freshly. This relys on other
			 * globally available variables and does a reinit of the
			 * VGraph 
			 */
			private function initVGraph():void {
				
				/* set the default edge renderer */
				changeEdgeRenderer();
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items */
				vgraph.graph = graph;

				/* set the layouter */
				setLayouter();

				/* select a root node, most layouters requires a root node */
				startRoot = graph.nodeByStringId("nothing").vnode;
				
				/* set the visibility limit options, default 2 */
				maxDistanceFromCurrent.value = 2;
				vgraph.maxVisibleDistance = maxDistanceFromCurrent.value;
				
				/* enable the history */
				// showHistory.selected = true;
				vgraph.showHistory = showHistory.selected;

				/* set if edge labels should be displayed */
				vgraph.displayEdgeLabels = delCheckBox.selected;

				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;

				/* update UI */
				refreshUI();

				initDone = true;
		
				vgraph.draw();
				
			}
			
			/* re-enable the refresh button in all cases */
			private function refresh():void {
				if(layouter != null) {
					layouter.layoutChanged = true;
				}
				vgraph.draw();
			}
			
			
			private function setLayouter():void {
				/* create and set the layouter */
				
				layouter = new DirectPlacementLayouter(vgraph);
				
				/* set some reference values */
				(layouter as DirectPlacementLayouter).relativeHeight = 400;
				(layouter as DirectPlacementLayouter).relativeWidth = 400;
				
				vgraph.layouter = layouter;
				layouter.autoFitEnabled = autoFit.selected;
			}
			
			/**
			 * changes the EdgeRenderer to be used.
			 */
			private function changeEdgeRenderer():void {
				
				var newERenderer:IEdgeRenderer;
				
				switch(edgeRenderSelector.selectedItem as String) {
					
					case "Directed":
						newERenderer = new DirectedEdgeRenderer;
						break;
					case "Orthogonal":
						newERenderer = new OrthogonalEdgeRenderer;
						break;
					case "Flow":
						newERenderer = new FlowEdgeRenderer;
						break;
					case "Default":
					default:
						newERenderer = new DefaultEdgeRenderer;
						break;
				}
				vgraph.edgeRenderer = newERenderer;
				vgraph.refresh();
			}
			
			
			/**
			 * this function is called on any vgraphChanged event
			 * so that some UI elements like lables could be
			 * updated */
			private function refreshUI():void {
				if(infoText != null) {
					infoText.text = vgraph.currentRootVNode.data.@name;
				}
				novisnodeslabel.text = vgraph.noVisibleVNodes.toString();
			}
			
			/* this updates the scale factor in all children of the vgraph
			 * it could be moved into the vgraph... */
			private function updateScale():void {
				var children:Array;
				var child:UIComponent;
				
				children = vgraph.getChildren();
				for each(child in children) {
					if(child is PrimitiveIconRenderer) {
						child.scaleX = scaleSlider.value;
						child.scaleY = scaleSlider.value;
					}
				}
				layouter.layoutChanged = true;
				vgraph.draw();
			}
			
			/* this function takes the node and selects it as a root
			 * node, automatically centering the layout around it */
			private function centerNode(nodeID:String):void {
				
				/* we assume we have the vgraph and graph objects */
				var newroot:INode;
				
				newroot = graph.nodeByStringId(nodeID);
				
				/* if we have a node, set its vnode as the new root */
				if(newroot) {
					
					/* is it really a new node */
					if(newroot.vnode != vgraph.currentRootVNode) {
						
						/* set it in the vgraph */
						vgraph.currentRootVNode = newroot.vnode;

						/* display things on the sidebar */
						detailTitle.text = dgSearch.selectedItem.@name;
						detailDesc.text = dgSearch.selectedItem.@description;
						selectedNodeID = dgSearch.selectedItem.@id;
					}
				} else {
					trace("Node with id:"+nodeID+" not found!!");
				}
			}
			
			/* various event handlers */
			
			private function updateAutoFit():void {
				layouter.autoFitEnabled = autoFit.selected;
				vgraph.draw();
			}

			private function changeMaxDistance():void {
				vgraph.maxVisibleDistance = maxDistanceFromCurrent.value;
				vgraph.draw();
			}

			private function changeShowHistory():void {
				vgraph.showHistory = showHistory.selected;
			}
 			
 			private function displayEdgeLabels():void {
 				vgraph.displayEdgeLabels = delCheckBox.selected;
 			}
 			
 
 			/**
 			 * handle a resize event, but only do anything if the init was
 			 * done
 			 */
 			private function handleResize():void {
 				if(initDone) {
 					vgraph.draw();
 				}
 			}
 
			/**
			 * initialises the 'myData' array collection in order 
			 * to allow filtering and sorting etc. */
 			private function initLocalData(result:XMLList):void {
 				var arr:Array = new Array();
 				
				for (var i:uint = 0; i < result.length(); ++i) {
				    arr[i] = result[i];
				}
				myData = new ArrayCollection(arr);
				myData.filterFunction = processFilter;
 			}
 			
 			/**
 			 * function to implement a filter function on the
 			 * "myData" ArrayCollection that holds our XML data
 			 * locally */
 			private function processFilter(item:Object):Boolean {

				// If no filter text, or a match, then true 
				if(!item.@name.length || 
					item.@name.toUpperCase().indexOf(txtFilter.text.toUpperCase()) >= 0) {
					return true;
				} else {
					return false;
				}
			}
		
			/**
			 * local double click, note that the node is
			 * made root node anyway from the vgraph itself
			 * but we have to add it to the history
			 */
			public function itemDoubleClick(e:Event):void {
				
				/* currently NOP
				var vn:IVisualNode;
				var dr:IDataRenderer;
				
				dr = (e.currentTarget as IDataRenderer);
				
				if(dr) {
					vn = (dr.data as IVisualNode);
					rootNodeHistory.push(vn);
					//trace("added node:"+vn.id+" to history");
				}
				*/
			}

			public function singleClick(e:Event): void {
				var ir:IDataRenderer;
				
				if(e.currentTarget is IDataRenderer) {
					ir = (e.currentTarget as IDataRenderer);
					
					leftAccordion.selectedIndex = 2;
					detailTitle.text = ir.data.data.@name;
					detailDesc.text = ir.data.data.@description;
					selectedNodeID = ir.data.data.@id;
				} else {
					trace("single click event target is no IDataRenderer");
				}
			}	
		]]>
	</mx:Script>					

	<mx:HTTPService id="SixDegreesExternalData" url="data/poker_direct.xml" showBusyCursor="true" resultFormat="e4x"
			result="handleHTTPResult(['Node','Edge','fromID','toID'], event)"/>

	<!-- Effects -->
	<mx:WipeLeft id="wipeLeft" duration="1000" />
	<mx:WipeRight id="wipeRight" duration="1000" />
	
	<mx:HBox id="DivNavRB" width="100%" height="100%" paddingBottom="5" horizontalGap="5">
		<mx:HBox id="sideBar" width="300" height="100%" horizontalGap="0" >
			<ui:Grip id="navGrip" gripIcon="{EmbeddedIcons.sixDegreeNode}"
				width="17" height="100%" horizontalAlign="center"
				gripTip="Show/Hide Control Panel" />
			<mx:VBox id="NavContainerRB" horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalAlign="middle" horizontalAlign="center" verticalGap="1" horizontalGap="0" width="100%" height="100%" hideEffect="{wipeLeft}" showEffect="{wipeRight}">
				<mx:Accordion id="leftAccordion" paddingBottom="5" paddingRight="5" paddingTop="5" paddingLeft="5" width="100%" height="100%" creationPolicy="all"  >
					<mx:Canvas id="visibilitycnvs" label="Visibility/Layout" height="100%" width="100%" paddingBottom="5" >
						<mx:VBox width="100%" horizontalAlign="center">
							<mx:Spacer height="3"/>
							<mx:HBox>
								<mx:Label toolTip="Select edge style" text="Select Edge Style" fontSize="9" textAlign="center"  />
								<mx:ComboBox id="edgeRenderSelector" width="95%" toolTip="Specifies how Edges are drawn" change="changeEdgeRenderer()" >
									<mx:ArrayCollection>
										<mx:String>Flow</mx:String>
										<mx:String>Default</mx:String>
										<mx:String>Directed</mx:String>
										<mx:String>Orthogonal</mx:String>
									</mx:ArrayCollection>
								</mx:ComboBox>
							</mx:HBox>
							
							

							<mx:HRule width="95%"/>
							<mx:Text  text="no data loaded" id="infoText" fontSize="9" textAlign="center" width="100%" />
							<mx:HRule width="95%"/>
							
							<mx:Label toolTip="Use this control to specify link level" text="Degrees of Separation" fontSize="9" textAlign="center" />
							<mx:HSlider tickInterval="1" width="95%" id="maxDistanceFromCurrent" value="2" minimum="1" maximum="6" 
								liveDragging="true" snapInterval="1" change="changeMaxDistance()" />
							<pi:PrimitiveRectangle height="10" width="100%" enabled="false"
								includeInLayout="true"
								fillEnabled="true" fillAngle="0" fillType="linear" fillFocalPointRatio="0" 
								fillSpreadMethod="pad" fillColors="[#00cc00,#ffff00,#ff9900,#ff0000]" 
								fillAlphas="[0.6,1,1,1]" fillRatios="[0,127,174,197]" 
								fillSelectedColors="[#ff6600,#ffffcc,#ffffcc,#ffffcc]"
								toolTip="Increasing degrees of separation requires significant processing power; 4 or more degrees may cause performance issues"					
							/>
							<mx:HBox>
								<mx:Label text="# of visible nodes:" fontSize="9" textAlign="left"/>
								<mx:Text id="novisnodeslabel" text="unknown" fontSize="9" textAlign="left"/>
							</mx:HBox>
							<mx:HRule width="95%"/>
							<mx:Label toolTip="Use this control to increase/decrease text size" text="Scaling" fontSize="9" textAlign="center" />
							<mx:HSlider id="scaleSlider" value="1" minimum="0.5" maximum="2.0" liveDragging="true" width="95%" tickInterval="0.1" snapInterval="0.1"
									change="updateScale();"/>
							<mx:HRule width="95%"/>
							<mx:HBox>
								<mx:CheckBox selected="true" toolTip="Select to show edge labels."
									id="delCheckBox" label="Edge Labels" click="displayEdgeLabels()" />
							</mx:HBox>
							<mx:HRule width="95%"/>
							<mx:HBox>
								<mx:CheckBox selected="true" toolTip="Select to restrict graph to boundaries of current view space.  Graph will autofit its size so that all nodes are visible."
									id="autoFit" label="AutoFit" click="updateAutoFit()" />
								<mx:CheckBox selected="false" id="showHistory" label="History" toolTip="Select will retain visibility of all nodes visited"
									click="changeShowHistory()"/>
							</mx:HBox>
							<mx:HRule width="95%"/>
							<mx:Button id="fromSixDegreesDataButton" width="100%" label="Refresh"
								icon="{EmbeddedIcons.refreshIcon}"
								click="refresh()" fontSize="9"/>
						</mx:VBox>		
					</mx:Canvas>
					<mx:Canvas id="searchcnvs" label="Search/Filter Nodes" height="100%" width="100%">
						<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5">
							<mx:Label text="Enter Search Criteria:"/>
							<mx:TextInput 
								id="txtFilter" 
								width="100%"
								change="myData.refresh()"/>
							<mx:HRule width="95%"/>
									
							<!-- Use DataGrid Click to call graph dataprovider() function to center node -->
							<mx:DataGrid id="dgSearch" doubleClick="centerNode(dgSearch.selectedItem.@id)" width="100%" height="100%" 
								dataProvider="{myData}" doubleClickEnabled="true" toolTip="Please double click to center" >
								<mx:columns>
									<mx:DataGridColumn id="nodeTitle" headerText="Node" dataField="@name" />
								</mx:columns>
							</mx:DataGrid>
						</mx:VBox>
					</mx:Canvas>
					<mx:Canvas id="detailcnvs" label="Details" height="100%" width="100%">
						<mx:VBox width="100%" height="100%">
							<mx:Spacer height="5" width="100%"/>
							<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingBottom="5" id="myVBox" borderColor="#666666" borderThickness="1" cornerRadius="5" borderStyle="solid" backgroundColor="#CCCCCC" backgroundAlpha=".2" >
								<mx:Label text="Title:" fontWeight="bold"/>
								<mx:TextArea id="detailTitle" borderStyle="none" backgroundAlpha=".1" width="100%" editable="false" wordWrap="true" text="" />	
								<mx:Label text="Description:" fontWeight="bold"/>
								<mx:TextArea id="detailDesc" verticalScrollPolicy="off" borderStyle="none" backgroundAlpha=".1" editable="false" width="100%" height="500" wordWrap="true" text=""/>
							</mx:VBox>
							<!--
							<mx:Button label="Remove Node from View" icon="@Embed('/imgs/detailclose2.gif')" width="100%" toolTip="Will remove node from graph.  Will not be deleted from database." click="removeNode(selectedNodeID)" />
							-->
						</mx:VBox>
					</mx:Canvas>
				</mx:Accordion>
			</mx:VBox>		
		</mx:HBox>

		<!-- Graph Panel -->
		<mx:Canvas borderStyle="solid" borderColor="#CCCCCC" width="100%" height="100%">		
			<un:VisualGraph id="vgraph" width="100%" height="100%"
				paddingBottom="5" left="0" right="0" top="0" bottom="0" backgroundColor="#FFFFFF" alpha="0.8"
				itemRenderer="org.un.flex.unComponentToolbox.renderers.PrimitiveIconRenderer"
				edgeLabelRenderer="simpleEdgeRenderer"
				vgraphChanged="refreshUI()"
				resize="handleResize()"
				visibilityLimitActive="true"
				>
			</un:VisualGraph>
		</mx:Canvas>
		<!-- End of Graph Panel -->
	</mx:HBox>
	
	<mx:states>
       <mx:State name="showCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="250"/>
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="5"/>
       </mx:State>        
		<mx:State name="hideCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="17"/>
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="0"/>
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{sideBar}" />
		</mx:Transition>
	</mx:transitions>
</mx:Application>
