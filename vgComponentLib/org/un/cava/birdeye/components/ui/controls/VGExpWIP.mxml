

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:vg="http://www.adobe.com/2006/fc"
	xmlns:un="org.un.flex.graphLayout.visual.*"
	xmlns:ui="org.un.cava.birdeye.ui.*"
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	creationComplete="init();" width="100%" height="100%" backgroundGradientColors="[#333333,#999999]"  viewSourceURL="srcview/index.html">

	<mx:Style source="org/un/cava/birdeye/style/css/main.css" />
	
	<mx:Script>
		<![CDATA[
			
			// Flash and Flex base classes
			import mx.core.IDataRenderer;
			import mx.core.UIComponent;
			import mx.rpc.events.ResultEvent;			
			import mx.collections.ArrayCollection;
        	import mx.collections.XMLListCollection;
			import mx.utils.ArrayUtil;
			import flash.events.*;
        	import mx.events.ItemClickEvent;  

			// Base visual graph classes
			import org.un.flex.graphLayout.visual.VisualGraph;
        	import org.un.flex.graphLayout.data.INode;
			import org.un.flex.graphLayout.data.IGraph;
			import org.un.flex.graphLayout.data.Graph;			
			import org.un.flex.graphLayout.visual.VisualNode;
			import org.un.flex.graphLayout.visual.IVisualNode;
			import org.un.flex.graphLayout.visual.IVisualGraph;
			import org.un.flex.graphLayout.visual.IEdgeRenderer;
			//import org.un.flex.graphLayout.visual.INodeRenderer;
			import org.un.flex.graphLayout.layout.ILayoutAlgorithm;
			// Layout classes
			import org.un.flex.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.flex.graphLayout.layout.ForceDirectedLayouter;
			import org.un.flex.graphLayout.layout.ParentCenteredRadialLayouter;
			import org.un.flex.graphLayout.layout.PhylloTreeLayouter;
			import org.un.flex.graphLayout.layout.HierarchicalLayouter;
			import org.un.flex.graphLayout.layout.CircularLayouter;
			import org.un.flex.graphLayout.layout.ISOMLayouter;
			import org.un.flex.graphLayout.layout.Hyperbolic2DLayouter;
			import org.un.flex.graphLayout.layout.DirectPlacementLayouter;
			// Edge renderer classes
			import org.un.flex.graphLayout.visual.DefaultEdgeRenderer;
			import org.un.flex.graphLayout.visual.DirectedEdgeRenderer;
			import org.un.flex.graphLayout.visual.OrthogonalEdgeRenderer;
			import org.un.flex.graphLayout.visual.FlowEdgeRenderer;
			import org.un.flex.graphLayout.visual.FlowCurveEdgeRenderer;
			import org.un.flex.graphLayout.visual.CircularEdgeRenderer;
			import org.un.flex.graphLayout.visual.HyperbolicEdgeRenderer;
			// Node renderer classes (not in library)
			import org.un.cava.birdeye.visualize.renderers.nodes.rectNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.basicNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.filterNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.iconNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.rotateNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.sizeByValueNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.NodeRenderer;
			// Edge Label renderer classes (not in library)
			import org.un.cava.birdeye.visualize.renderers.edges.basicEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.buttonEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.iconEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.nullEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.textEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.EdgeRenderer;
			// Util classes
			import org.un.cava.birdeye.assets.EmbeddedIcons;
			import org.un.cava.birdeye.utils.GlobalParams;
			
			// Private Variables
			private var graph:IGraph;
			private var layouter:ILayoutAlgorithm;
			private var selectedEdgeRenderer:IEdgeRenderer;
			private var directedEdgeRenderer:IEdgeRenderer = new DirectedEdgeRenderer;
			private var defaultEdgeRenderer:IEdgeRenderer = new DefaultEdgeRenderer;
			private var currNode:IVisualNode;
			private var prevNode:IVisualNode;
			private var startRoot:IVisualNode;
			private var itemCount:int = 0;
			private var absoluteScaling:Boolean = true;
			private var initDone:Boolean = false;
			private var currentLayouterType:String = "";
			private var currentEdgeRendererType:String = "";
			private var currentEdgeItemRendererType:String = "";
			private var currentNodeRendererType:String = "";
			private var rootNodeHistory:Array;
			private var currentHistoryIndex:uint;
			
			
			private var xmlNames:Array;
			
			// Public Variables */
			
			
			 
			[Bindable]
			public var selectedNodeID:String;
		
			// Methods
							
			/* Init function, initiates the HTTP
			 * request. All further initalisation is done
			 * in the event handler for the HTTP Service */
			private function init():void {
				
				initData(['Node','Edge','fromID','toID']);
				leftAccordion.selectedIndex = 0;
	
				/* register some components with the global param static class */
				GlobalParams.visualLeftAccordion = leftAccordion;
				GlobalParams.visualDetailTitle = detailTitle;
				GlobalParams.visualDetailDesc = detailDesc;
				GlobalParams.visualNodeLabel = nodeCheckBox;
				
			}
			
			/**
			 * event handler for HTTPService, does all the remaining required
			 * initialisation */
			private function initData(xN:Array):void {
				
				xmlNames = xN;
				
				/* first load the data into our array collection */
				initLocalData(xmldata.elements());
				
				/* init a graph object with the XML data */
				graph = new org.un.flex.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata,xmlNames);
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items */
				vgraph.graph = graph;

				/* set the default layouter and renderer types */
				currentLayouterType = "ConcentricRadial";
				currentNodeRendererType = "Icons";
				currentEdgeRendererType = "Default";
				currentEdgeItemRendererType = "Icons";

				/* set the layouter and renderers */
				setLayouter();
				setNodeRenderer();
				setEdgeRenderer();
				setEdgeItemRenderer();
				
				/* set the visibility limit options, default 2 */
				maxDistanceFromCurrent.value = 2;
				vgraph.maxVisibleDistance = maxDistanceFromCurrent.value;
				
				/* enable the history */
				// showHistory.selected = true;
				vgraph.showHistory = showHistory.selected;

				/* select a root node, most layouters requires a root node */
				// "1" is id of rootnode from XML source
				startRoot = graph.nodeByStringId("1").vnode;

				/* init the root history array */
				rootNodeHistory = new Array;

				/* add it to the history */
				rootNodeHistory.push(startRoot);
				currentHistoryIndex = 0;
				
				/* set if edge labels should be displayed */
				// NOT WORKING
				vgraph.displayEdgeLabels = delCheckBox.selected;
				
				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;

				/* update UI */
				refreshUI();
								
				initDone = true;
				
				
			}
			
			


			public function singleClick(e:Event): void {
				var ir:IDataRenderer;
				
				if(e.currentTarget is IDataRenderer) {
					ir = (e.currentTarget as IDataRenderer);
					
					leftAccordion.selectedIndex = 2;
					
				} else {
					trace("single click event target is no IDataRenderer");
				}
			}
		
		
			// HISTORY BUTTONS NOT WORKING
		
			/**
			 * move backwards in the history */
			public function historyBack():void {
				var hl:uint;
				var vn:IVisualNode;
				
				hl = rootNodeHistory.length;
				
				if(currentHistoryIndex < hl - 1) {
					++currentHistoryIndex;
					
					vn = rootNodeHistory[currentHistoryIndex];
					/* set the root node as the one in the 
					 * history */
					if(vn != vgraph.currentRootVNode) {
						vgraph.currentRootVNode = vn;
					}
				}
			}
			
			/**
			 * move forward */
			public function historyForward():void {
				var vn:IVisualNode;
				if(currentHistoryIndex > 0) {
					--currentHistoryIndex;
					vn = rootNodeHistory[currentHistoryIndex];
					/* set the root node as the one in the 
					 * history */
					if(vn != vgraph.currentRootVNode) {
						vgraph.currentRootVNode = vn;
					}
				}
			}
			
			public function histForwardOk():Boolean {
				return (currentHistoryIndex > 0);
			}
			
			public function histBackOk():Boolean {
				var hl:uint;
				hl = rootNodeHistory.length;
				return(currentHistoryIndex < hl - 1);
			}
		
		]]>
	</mx:Script>					


	
	<!-- Effects -->
	<mx:WipeLeft id="wipeLeft" duration="1000" />
	<mx:WipeRight id="wipeRight" duration="1000" />
	
	<mx:HBox id="DivNavRB" width="100%" height="100%" paddingBottom="5" horizontalGap="5">
		<mx:HBox id="sideBar" width="300" height="100%" horizontalGap="0" >
			<ui:Grip id="navGrip" 
				width="17" height="100%" horizontalAlign="center"
				gripTip="Show/Hide Control Panel" />
				
			<mx:VBox id="NavContainerRB" horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalAlign="middle" horizontalAlign="center" verticalGap="1" horizontalGap="0" width="100%" height="100%" hideEffect="{wipeLeft}" showEffect="{wipeRight}">
				<!-- DefaultVGAccordion -->
			</mx:VBox>		
		</mx:HBox>

		<!-- Graph Panel -->
		<mx:Canvas id="graphCnvs" borderStyle="solid" borderColor="#CCCCCC" width="100%" height="100%"  >		
			<un:VisualGraph id="vgraph" width="100%" height="100%" 
				paddingBottom="5" left="0" right="0" top="0" bottom="0" backgroundColor="#FFFFFF" alpha="1"
				vgraphChanged="refreshUI()"
				resize="handleResize()"
				visibilityLimitActive="true"
	
				>
			</un:VisualGraph>
			
		</mx:Canvas>
		<!-- End of Graph Panel -->
	</mx:HBox>
	
	<mx:states>
       <mx:State name="showCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="300" />
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="5" />
       </mx:State>        
		<mx:State name="hideCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="17" />
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="0" />
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{sideBar}" />
		</mx:Transition>
	</mx:transitions>

<mx:XML id="xmldata" source="data/graph.xml" />
	
</mx:Application>
