

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:vg="http://www.adobe.com/2006/fc"
	xmlns:un="org.un.flex.graphLayout.visual.*"
	xmlns:ui="org.un.cava.birdeye.ui.*"
	xmlns:flexlib="http://code.google.com/p/flexlib/"
	creationComplete="init();" width="100%" height="100%" backgroundGradientColors="[#333333,#999999]"  viewSourceURL="srcview/index.html">

	<mx:Style source="org/un/cava/birdeye/style/css/main.css" />
	
	<mx:Script>
		<![CDATA[
			
			// Flash and Flex base classes
			import mx.core.IDataRenderer;
			import mx.core.UIComponent;
			import mx.rpc.events.ResultEvent;			
			import mx.collections.ArrayCollection;
        	import mx.collections.XMLListCollection;
			import mx.utils.ArrayUtil;
			import flash.events.*;
        	import mx.events.ItemClickEvent;  

			// Base visual graph classes
			import org.un.flex.graphLayout.visual.VisualGraph;
        	import org.un.flex.graphLayout.data.INode;
			import org.un.flex.graphLayout.data.IGraph;
			import org.un.flex.graphLayout.data.Graph;			
			import org.un.flex.graphLayout.visual.VisualNode;
			import org.un.flex.graphLayout.visual.IVisualNode;
			import org.un.flex.graphLayout.visual.IVisualGraph;
			import org.un.flex.graphLayout.visual.IEdgeRenderer;
			//import org.un.flex.graphLayout.visual.INodeRenderer;
			import org.un.flex.graphLayout.layout.ILayoutAlgorithm;
			// Layout classes
			import org.un.flex.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.flex.graphLayout.layout.ForceDirectedLayouter;
			import org.un.flex.graphLayout.layout.ParentCenteredRadialLayouter;
			import org.un.flex.graphLayout.layout.PhylloTreeLayouter;
			import org.un.flex.graphLayout.layout.HierarchicalLayouter;
			import org.un.flex.graphLayout.layout.CircularLayouter;
			import org.un.flex.graphLayout.layout.ISOMLayouter;
			import org.un.flex.graphLayout.layout.Hyperbolic2DLayouter;
			import org.un.flex.graphLayout.layout.DirectPlacementLayouter;
			// Edge renderer classes
			import org.un.flex.graphLayout.visual.DefaultEdgeRenderer;
			import org.un.flex.graphLayout.visual.DirectedEdgeRenderer;
			import org.un.flex.graphLayout.visual.OrthogonalEdgeRenderer;
			import org.un.flex.graphLayout.visual.FlowEdgeRenderer;
			import org.un.flex.graphLayout.visual.FlowCurveEdgeRenderer;
			import org.un.flex.graphLayout.visual.CircularEdgeRenderer;
			import org.un.flex.graphLayout.visual.HyperbolicEdgeRenderer;
			// Node renderer classes (not in library)
			import org.un.cava.birdeye.visualize.renderers.nodes.rectNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.basicNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.filterNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.iconNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.rotateNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.sizeByValueNodeRenderer;
			import org.un.cava.birdeye.visualize.renderers.nodes.NodeRenderer;
			// Edge Label renderer classes (not in library)
			import org.un.cava.birdeye.visualize.renderers.edges.basicEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.buttonEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.iconEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.nullEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.textEdgeRenderer;
			import org.un.cava.birdeye.visualize.renderers.edges.EdgeRenderer;
			// Util classes
			import org.un.cava.birdeye.assets.EmbeddedIcons;
			import org.un.cava.birdeye.utils.GlobalParams;
			
			// Private Variables
			private var graph:IGraph;
			private var layouter:ILayoutAlgorithm;
			private var selectedEdgeRenderer:IEdgeRenderer;
			private var directedEdgeRenderer:IEdgeRenderer = new DirectedEdgeRenderer;
			private var defaultEdgeRenderer:IEdgeRenderer = new DefaultEdgeRenderer;
			private var currNode:IVisualNode;
			private var prevNode:IVisualNode;
			private var startRoot:IVisualNode;
			private var itemCount:int = 0;
			private var absoluteScaling:Boolean = true;
			private var initDone:Boolean = false;
			private var currentLayouterType:String = "";
			private var currentEdgeRendererType:String = "";
			private var currentEdgeItemRendererType:String = "";
			private var currentNodeRendererType:String = "";
			private var rootNodeHistory:Array;
			private var currentHistoryIndex:uint;
			private var xmlNames:Array;
			
			// Public Variables */
			
			/* array collection to hold the XML data in order
			 * to allow searching and filtering */
			[Bindable]
			public var filterNodes:ArrayCollection;
			 
			[Bindable]
			public var selectedNodeID:String;
		
			// Methods
							
			/* Init function, initiates the HTTP
			 * request. All further initalisation is done
			 * in the event handler for the HTTP Service */
			private function init():void {
				
				initData(['Node','Edge','fromID','toID']);
				leftAccordion.selectedIndex = 0;
	
				/* register some components with the global param static class */
				GlobalParams.visualLeftAccordion = leftAccordion;
				GlobalParams.visualDetailTitle = detailTitle;
				GlobalParams.visualDetailDesc = detailDesc;
				GlobalParams.visualNodeLabel = nodeCheckBox;
				
			}
			
			/**
			 * event handler for HTTPService, does all the remaining required
			 * initialisation */
			private function initData(xN:Array):void {
				
				xmlNames = xN;
				
				/* first load the data into our array collection */
				initLocalData(xmldata.elements());
				
				/* init a graph object with the XML data */
				graph = new org.un.flex.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata,xmlNames);
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items */
				vgraph.graph = graph;

				/* set the default layouter and renderer types */
				currentLayouterType = "ConcentricRadial";
				currentNodeRendererType = "Icons";
				currentEdgeRendererType = "Default";
				currentEdgeItemRendererType = "Icons";

				/* set the layouter and renderers */
				setLayouter();
				setNodeRenderer();
				setEdgeRenderer();
				setEdgeItemRenderer();
				
				/* set the visibility limit options, default 2 */
				maxDistanceFromCurrent.value = 2;
				vgraph.maxVisibleDistance = maxDistanceFromCurrent.value;
				
				/* enable the history */
				// showHistory.selected = true;
				vgraph.showHistory = showHistory.selected;

				/* select a root node, most layouters requires a root node */
				// "1" is id of rootnode from XML source
				startRoot = graph.nodeByStringId("1").vnode;

				/* init the root history array */
				rootNodeHistory = new Array;

				/* add it to the history */
				rootNodeHistory.push(startRoot);
				currentHistoryIndex = 0;
				
				/* set if edge labels should be displayed */
				// NOT WORKING
				vgraph.displayEdgeLabels = delCheckBox.selected;
				
				/* the following kicks it off .... */
				vgraph.currentRootVNode = startRoot;

				/* update UI */
				refreshUI();
								
				initDone = true;
				
				
			}
			
			/* re-enable the refresh button in all cases */
			private function refresh():void {
				
				var oldroot:IVisualNode;
				var oldsid:String;
				var newroot:INode;
				
				/* remove and create a new layouter */			
				if(layouter != null) {
					layouter.resetAll();
					layouter = null;
				}
				
				/* init a graph object with the XML data */
				graph = new org.un.flex.graphLayout.data.Graph("XMLAsDocsGraph",false,xmldata,xmlNames);
				
				oldroot = vgraph.currentRootVNode;
				oldsid = oldroot.node.stringid;
				
				/* set the graph in the VGraph object, this automatically
				 * initializes the VGraph items */
				vgraph.graph = graph;
				
				setLayouter();
				
				/* setting a new graph invalidated our old root, we need to reset it */
				/* we try to find a node, that has the same string-id as the old root node */
				newroot = graph.nodeByStringId(oldsid);
				if(newroot != null) {
					startRoot = newroot.vnode;
					vgraph.currentRootVNode = startRoot; // this redraws the whole thing
				} else {
					throw Error("Cannot set a default root, bailing out");
				}
			}
			
			/**
			 * This function handles the change of layouter
			 */
			private function changeLayouter():void {
				
				currentLayouterType = (layoutSelector.selectedItem as String);
				
				/* kill off animation in old layouter if present */
				if(layouter != null) {
					layouter.resetAll();
				}
				
				/* first set the layouter */
				setLayouter();
				
				/* kick it off */
				vgraph.draw();
			}
			
			private function changeNodeRenderer():void {
				
				currentNodeRendererType = (nodeRendererSelector.selectedItem as String);
				
				/* first set the layouter */
				setNodeRenderer();
				
				/* kick it off */
				vgraph.draw();
			}
		
			

			private function setLayouter():void {
				/* create and set the layouter */
				if(layouter != null) {
					layouter.resetAll(); // to kill any timers
				} 
				switch(currentLayouterType) {
					case "ConcentricRadial":
						layouter = new ConcentricRadialLayouter(vgraph);
						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						phidiallabel.setStyle("color",0xCCCCCC);
						phidial.alpha=0.3;
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						break;
					case "SingleCycleCircle":
						layouter = new CircularLayouter(vgraph);
						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						phidiallabel.setStyle("color",0xCCCCCC);
						phidial.alpha=0.3;
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						break;
					case "ISOM":
						layouter = new ISOMLayouter(vgraph);
						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						phidiallabel.setStyle("color",0xCCCCCC);
						phidial.alpha=0.3;
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						break;
					case "ParentCenteredRadial":
						layouter = new ParentCenteredRadialLayouter(vgraph);
						(layouter as ParentCenteredRadialLayouter).phi = phidial.value;
						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						// What is needed
						phidiallabel.setStyle("color",0x000000);
						phidial.alpha=1;
						break;
					case "Phyllotactic":
						layouter = new PhylloTreeLayouter(vgraph);
						(layouter as PhylloTreeLayouter).phi = phidial.value;
						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						// What is needed
						phidiallabel.setStyle("color",0x000000);
						phidial.alpha=1;
						break;
					case "Hierarchical":
						layouter = new HierarchicalLayouter(vgraph);
						(layouter as HierarchicalLayouter).breadth = bslider.value;
						(layouter as HierarchicalLayouter).enableSiblingSpread = siblingSpread.selected;
						// What's not needed
						phidiallabel.setStyle("color",0xCCCCCC);
						phidial.alpha=0.3;
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						// What is needed
						bsliderlabel.setStyle("color",0x000000);
						bslider.alpha=1;
						siblingSpread.alpha=1;
						siblingSpread.setStyle("color",0x000000);
						orientationSelector.alpha=1;
						orientationSelector.setStyle("color",0x000000);
						break;
					case "ForceDirected":
						layouter = new ForceDirectedLayouter(vgraph);
						layouter.linkLength = linkLength.value;
						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						phidiallabel.setStyle("color",0xCCCCCC);
						phidial.alpha=0.3;
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						// What's needed
						dampCheck.alpha=1;
						dampCheck.setStyle("color",0x000000);
						break;
					case "Hyperbolic":
						layouter = new Hyperbolic2DLayouter(vgraph);
						layouter.linkLength = linkLength.value; //not used
						bslider.visible = false;
						bsliderlabel.visible = false;		
						phidial.visible = false;
						phidiallabel.visible = false;
						dampCheck.visible = false;
						siblingSpread.visible = false;
						orientationSelector.visible = false;
						
						bslider.includeInLayout = false;
						bsliderlabel.includeInLayout = false;
						dampCheck.includeInLayout = false;		
						phidial.includeInLayout = false;
						phidiallabel.includeInLayout = false;
						siblingSpread.includeInLayout = false;
						orientationSelector.includeInLayout = false;
						break;
					case "DirectPlacement":
						layouter = new DirectPlacementLayouter(vgraph);
						/* set some reference values */
						(layouter as DirectPlacementLayouter).relativeHeight = 400;
						(layouter as DirectPlacementLayouter).relativeWidth = 400;

						// What's not needed
						bsliderlabel.setStyle("color",0xCCCCCC);
						bslider.alpha=0.3;
						orientationSelector.alpha=0.3;
						orientationSelector.setStyle("color",0xCCCCCC);
						phidiallabel.setStyle("color",0xCCCCCC);
						phidial.alpha=0.3;
						dampCheck.alpha=0.3;
						dampCheck.setStyle("color",0xCCCCCC);
						siblingSpread.alpha=0.3;
						siblingSpread.setStyle("color",0xCCCCCC);
						break;
					default:
						layouter = new ConcentricRadialLayouter(vgraph);
						
						
				}
				vgraph.layouter = layouter;
				if (layouter is Hyperbolic2DLayouter) {
					/* set the hyperbolic edge renderer type */
					vgraph.edgeRenderer = new HyperbolicEdgeRenderer((layouter as Hyperbolic2DLayouter).projector);
					vgraph.scrollBackgroundInDrag = false;
					vgraph.moveNodeInDrag = false;
					absoluteScaling = false;
				} else if (layouter is CircularLayouter) {
					/* set the hyperbolic edge renderer type */
					vgraph.edgeRenderer = new CircularEdgeRenderer();
					vgraph.scrollBackgroundInDrag = false;
					vgraph.moveNodeInDrag = false;
					absoluteScaling = true;
					updateScale();
				} else if (layouter is DirectPlacementLayouter) {
					/* set the orthogonal edge renderer type */
					vgraph.edgeRenderer = new OrthogonalEdgeRenderer();
					vgraph.scrollBackgroundInDrag = true;
					vgraph.moveNodeInDrag = true;
					absoluteScaling = true;
					updateScale();
				} else {
					/* set the directed edge renderer type */
					vgraph.edgeRenderer = directedEdgeRenderer;
					vgraph.scrollBackgroundInDrag = true;
					vgraph.moveNodeInDrag = true;
					absoluteScaling = true;
					updateScale();
				}

				layouter.autoFitEnabled = autoFit.selected;
				layouter.disableAnimation = disableAnim.selected;
			}
			
		
			
			private function setNodeRenderer():void {
				
				var selectedNodeRenderer:IFactory;
				
				switch(currentNodeRendererType) {
					case "Default":
						selectedNodeRenderer = new ClassFactory(basicNodeRenderer);
						break;
					case "Size by Value":
						selectedNodeRenderer = new ClassFactory(sizeByValueNodeRenderer);
						break;
					case "Icons":
						selectedNodeRenderer = new ClassFactory(iconNodeRenderer);
						break;
					case "Rotate":
						selectedNodeRenderer = new ClassFactory(rotateNodeRenderer);
						break;
					case "Filters":
						selectedNodeRenderer = new ClassFactory(filterNodeRenderer);
						break;
					case "Mix":
						selectedNodeRenderer = new ClassFactory(NodeRenderer);
						break;
					default:
						selectedNodeRenderer = new ClassFactory(basicNodeRenderer);
				}
				vgraph.itemRenderer = selectedNodeRenderer;
				refresh();
				
			}
			
			private function setEdgeRenderer():void {
				var selectedEdgeRenderer:IEdgeRenderer;
				
				switch(currentEdgeRendererType) {
					case "Default":
						selectedEdgeRenderer = new DefaultEdgeRenderer;
						break;
					case "Directed":
						selectedEdgeRenderer = new DirectedEdgeRenderer;
						break;
					case "Orthogonal":
						selectedEdgeRenderer = new OrthogonalEdgeRenderer;
						break;
					case "Flow":
						selectedEdgeRenderer = new FlowEdgeRenderer;
						vgraph.displayEdgeLabels = false;
						break;
					case "Belzier":
						selectedEdgeRenderer = new CircularEdgeRenderer;
						vgraph.displayEdgeLabels = false;
						break;
					default:
						selectedEdgeRenderer = new DefaultEdgeRenderer;;
				}
				
				vgraph.edgeRenderer = selectedEdgeRenderer;
				vgraph.refresh();

			}
			
			
			
			/**
			 * this function is called on any vgraphChanged event
			 * so that some UI elements like lables could be
			 * updated */
			private function refreshUI():void {
				if(infoText != null) {
					infoText.text = vgraph.currentRootVNode.data.@name;
				}
				
				linkLength.value = layouter.linkLength;
				
				if(layouter is HierarchicalLayouter) {
					bslider.value = (layouter as HierarchicalLayouter).breadth;
				
				}
				
				novisnodeslabel.text = vgraph.noVisibleVNodes.toString();
			}
			
			
			/* this function takes the node and selects it as a root
			 * node, automatically centering the layout around it */
			private function centerNode(nodeID:String):void {
				/* we assume we have the vgraph and graph objects */
				
				var newroot:INode;
				
				newroot = graph.nodeByStringId(nodeID);
				
				/* if we have a node, set its vnode as the new root */
				if(newroot) {
					
					/* is it really a new node */
					if(newroot.vnode != vgraph.currentRootVNode) {
						
						/* set it in the vgraph */
						vgraph.currentRootVNode = newroot.vnode;
						
						/* add it to the history */
						rootNodeHistory.push(newroot.vnode);
						
						
					}
				} else {
					trace("Node with id:"+nodeID+" not found!!");
				}
			}
 

 			/**
 			 * handle a resize event, but only do anything if the init was
 			 * done
 			 */
 			private function handleResize():void {
 				if(initDone) {
 					/* it can happen that the linklength is reduced to 0
 					 * in this case we reset it */
 					if(layouter.linkLength == 0) {
 						layouter.linkLength = 100; // current default
 					}
 					vgraph.draw();	
 				}
 			}
 
			/**
			 * initialises the 'filterNodes' array collection in order 
			 * to allow filtering and sorting etc. */
 			private function initLocalData(result:XMLList):void {
 				var arr:Array = new Array();
 				
				for (var i:uint = 0; i < result.length(); ++i) {
				    arr[i] = result[i];
				}
				filterNodes = new ArrayCollection(arr);
				filterNodes.filterFunction = processFilter;
 			}
 			
 			/**
 			 * function to implement a filter function on the
 			 * "filterNodes" ArrayCollection that holds our XML data
 			 * locally */
 			private function processFilter(item:Object):Boolean {

				var name:String;
				
				name = item.@name;

				// If no filter text, or a match, then true 
				if(!name.length || 
					name.toUpperCase().indexOf(txtFilter.text.toUpperCase()) >= 0) {
					return true;
				} 
				return false;
			}
		
			/**
			 * local double click, note that the node is
			 * made root node anyway from the vgraph itself
			 * but we have to add it to the history
			 */
			public function itemDoubleClick(e:Event):void {
				var vn:IVisualNode;
				var dr:IDataRenderer;
				
				dr = (e.currentTarget as IDataRenderer);
				
				if(dr) {
					vn = (dr.data as IVisualNode);
					rootNodeHistory.push(vn);
					// trace("added node:"+vn.id+" to history");
				}
			}

			public function singleClick(e:Event): void {
				var ir:IDataRenderer;
				
				if(e.currentTarget is IDataRenderer) {
					ir = (e.currentTarget as IDataRenderer);
					
					leftAccordion.selectedIndex = 2;
					
				} else {
					trace("single click event target is no IDataRenderer");
				}
			}
		
		
			// HISTORY BUTTONS NOT WORKING
		
			/**
			 * move backwards in the history */
			public function historyBack():void {
				var hl:uint;
				var vn:IVisualNode;
				
				hl = rootNodeHistory.length;
				
				if(currentHistoryIndex < hl - 1) {
					++currentHistoryIndex;
					
					vn = rootNodeHistory[currentHistoryIndex];
					/* set the root node as the one in the 
					 * history */
					if(vn != vgraph.currentRootVNode) {
						vgraph.currentRootVNode = vn;
					}
				}
			}
			
			/**
			 * move forward */
			public function historyForward():void {
				var vn:IVisualNode;
				if(currentHistoryIndex > 0) {
					--currentHistoryIndex;
					vn = rootNodeHistory[currentHistoryIndex];
					/* set the root node as the one in the 
					 * history */
					if(vn != vgraph.currentRootVNode) {
						vgraph.currentRootVNode = vn;
					}
				}
			}
			
			public function histForwardOk():Boolean {
				return (currentHistoryIndex > 0);
			}
			
			public function histBackOk():Boolean {
				var hl:uint;
				hl = rootNodeHistory.length;
				return(currentHistoryIndex < hl - 1);
			}
		
		]]>
	</mx:Script>					


	
	<!-- Effects -->
	<mx:WipeLeft id="wipeLeft" duration="1000" />
	<mx:WipeRight id="wipeRight" duration="1000" />
	
	<mx:HBox id="DivNavRB" width="100%" height="100%" paddingBottom="5" horizontalGap="5">
		<mx:HBox id="sideBar" width="300" height="100%" horizontalGap="0" >
			<ui:Grip id="navGrip" 
				width="17" height="100%" horizontalAlign="center"
				gripTip="Show/Hide Control Panel" />
			<mx:VBox id="NavContainerRB" horizontalScrollPolicy="off" verticalScrollPolicy="off" verticalAlign="middle" horizontalAlign="center" verticalGap="1" horizontalGap="0" width="100%" height="100%" hideEffect="{wipeLeft}" showEffect="{wipeRight}">
				<mx:Accordion id="leftAccordion" paddingBottom="5" paddingRight="5" paddingTop="5" paddingLeft="5" width="100%" height="100%" creationPolicy="all" >
					<mx:Canvas id="visibilitycnvs" label="Visibility/Layout" height="100%" width="100%" paddingBottom="5" >
						<mx:VBox width="100%" horizontalAlign="center">
							
							<mx:Spacer height="3" />
								
							<!-- Graph and Layout Parameters -->
							<flexlib:WindowShade id="layoutCnvs" styleName="linkButtonWindowShade" 
  							label="Layout" width="100%" opened="true" horizontalAlign="center" paddingBottom="5" >
								<mx:VBox width="97%" horizontalAlign="center" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5" borderColor="#666666" borderThickness="1" cornerRadius="5" borderStyle="solid" backgroundColor="#CCCCCC" backgroundAlpha=".2" >
									<mx:ComboBox id="layoutSelector" prompt="Select layout algorithm" width="95%" toolTip="Some layouts are under construction" change="changeLayouter()" >
										<mx:ArrayCollection>
											<mx:String>---Radial---</mx:String>
											<mx:String>ConcentricRadial</mx:String>
											<mx:String>ParentCenteredRadial</mx:String>
											<mx:String>SingleCycleCircle</mx:String>
											<mx:String>Hyperbolic</mx:String>
											<mx:String>---Tree---</mx:String>
											<mx:String>Hierarchical</mx:String>
											<mx:String>---Physics---</mx:String>
											<mx:String>ForceDirected</mx:String>
											<mx:String>---Coordinates---</mx:String>
											<mx:String>DirectPlacement</mx:String>
											<mx:String>---Experimental---</mx:String>
											<mx:String>Phyllotactic</mx:String>
											
										</mx:ArrayCollection>
									</mx:ComboBox>	
									<mx:HBox width="100%" >
										<mx:Label text="Center Node: " />
										<mx:Text text="no data loaded" id="infoText" fontSize="9" textAlign="left" width="100%" />
									</mx:HBox>
									<mx:HBox width="100%" >
										<mx:Label text="Visible Nodes:" fontSize="9" textAlign="left" />
										<mx:Text id="novisnodeslabel" text="unknown" fontSize="9" textAlign="left" />
									</mx:HBox>
								</mx:VBox>
							</flexlib:WindowShade>
							
						
							
							<!-- Node Styles -->
							<flexlib:WindowShade id="nodeCnvs" styleName="linkButtonWindowShade" 
      							label="Node Styles" width="100%" opened="true" horizontalAlign="center" paddingBottom="5" >
								<mx:VBox width="97%" horizontalAlign="center" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5" borderColor="#666666" borderThickness="1" cornerRadius="5" borderStyle="solid" backgroundColor="#CCCCCC" backgroundAlpha=".2" >
									<mx:HBox width="100%" >
										<mx:ComboBox id="nodeRendererSelector" prompt="Select node style" width="95%" toolTip="Select the style of line drawn among nodes" change="changeNodeRenderer()"  >
												<mx:ArrayCollection>
													<mx:String>Default</mx:String>
													<mx:String>Size by Value</mx:String>
													<mx:String>Icons</mx:String>
													<mx:String>Rotate</mx:String>
													<mx:String>Filters</mx:String>
													<mx:String>Mix</mx:String>
												</mx:ArrayCollection>
										</mx:ComboBox>
										<mx:CheckBox selected="true" toolTip="Select to show node labels."
												id="nodeCheckBox" label="Node Labels" change="refresh()" />
									</mx:HBox>
								</mx:VBox>
							</flexlib:WindowShade>
							
							<!-- Edge Styles -->
							<flexlib:WindowShade id="edgeCnvs" styleName="linkButtonWindowShade" 
      							label="Edge Styles" width="100%" opened="true" horizontalAlign="center" paddingBottom="5" >
								<mx:VBox width="97%" horizontalAlign="center" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5" borderColor="#666666" borderThickness="1" cornerRadius="5" borderStyle="solid" backgroundColor="#CCCCCC" backgroundAlpha=".2" >
									<mx:ComboBox id="edgeRendererSelector" prompt="Select edge style" width="100%" toolTip="Select the style of line drawn among nodes" change="changeEdgeRenderer()"  >
											<mx:ArrayCollection>
												<mx:String>Default</mx:String>
												<mx:String>Directed</mx:String>
												<mx:String>Orthogonal</mx:String>
												<mx:String>Flow</mx:String>
												<mx:String>Belzier</mx:String>
											</mx:ArrayCollection>
									</mx:ComboBox>
	
								</mx:VBox>
							</flexlib:WindowShade>
							
							<!-- View Controls -->
		
							<mx:Button id="fromSixDegreesDataButton" width="100%" label="Refresh Data" toolTip="Refresh data to reflect database changes..."
								click="refresh()" fontSize="9" icon="{EmbeddedIcons.refreshIcon}" />
							
							
							
						</mx:VBox>		
					</mx:Canvas>
					<mx:Canvas id="searchcnvs" label="Search/Filter Nodes" height="100%" width="100%">
						<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5">
							<mx:HBox width="100%" verticalAlign="middle" >
							<mx:Image source="{EmbeddedIcons.searchIcon}" />
							<mx:Label text="Enter Search Criteria:" />
							</mx:HBox>
							
							<mx:TextInput 
								id="txtFilter" 
								width="100%"
								change="filterNodes.refresh()" />
							<mx:HRule width="95%" />
									
							<!-- Use DataGrid Click to call graph dataprovider() function to center node -->
							<mx:DataGrid id="dgSearch" doubleClick="centerNode(dgSearch.selectedItem.@id)" width="100%" height="100%" 
								dataProvider="{filterNodes}" doubleClickEnabled="true" toolTip="Please double click to center" >
								<mx:columns>
									<mx:DataGridColumn id="nodeTitle" headerText="Node" dataField="@name" />
								</mx:columns>
							</mx:DataGrid>
						</mx:VBox>
					</mx:Canvas>
					
					<mx:Canvas id="detailcnvs" label="Details" height="100%" width="100%">
						<mx:VBox width="100%" height="100%">
							<mx:Spacer height="5" width="100%" />
							<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingBottom="5" id="myVBox" borderColor="#666666" borderThickness="1" cornerRadius="5" borderStyle="solid" backgroundColor="#CCCCCC" backgroundAlpha=".2" >
								<mx:Label text="Title" fontWeight="bold" />
								<mx:TextArea id="detailTitle" borderStyle="none" backgroundAlpha=".1" width="100%" editable="false" wordWrap="true" text="" />	
								<mx:Label text="Description" fontWeight="bold" />
								<mx:TextArea id="detailDesc" verticalScrollPolicy="off" borderStyle="none" backgroundAlpha=".1" editable="false" width="100%" height="100%" wordWrap="true" text="" />
							</mx:VBox>
							<!--
							<mx:Button label="Remove Node from View" icon="@Embed('/imgs/detailclose2.gif')" width="100%" toolTip="Will remove node from graph.  Will not be deleted from database." click="removeNode(selectedNodeID)" />
							-->
							
						</mx:VBox>
					</mx:Canvas>
					
				</mx:Accordion>
				
			</mx:VBox>		
		</mx:HBox>

		<!-- Graph Panel -->
		<mx:Canvas id="graphCnvs" borderStyle="solid" borderColor="#CCCCCC" width="100%" height="100%"  >		
			<un:VisualGraph id="vgraph" width="100%" height="100%" 
				paddingBottom="5" left="0" right="0" top="0" bottom="0" backgroundColor="#FFFFFF" alpha="1"
				vgraphChanged="refreshUI()"
				resize="handleResize()"
				visibilityLimitActive="true"
	
				>
			</un:VisualGraph>
			
		</mx:Canvas>
		<!-- End of Graph Panel -->
	</mx:HBox>
	
	<mx:states>
       <mx:State name="showCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="300" />
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="5" />
       </mx:State>        
		<mx:State name="hideCntrlPanel">
			<mx:SetProperty target="{sideBar}" name="width" value="17" />
			<mx:SetStyle target="{DivNavRB}" name="horizontalGap" value="0" />
		</mx:State>
	</mx:states>
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Resize target="{sideBar}" />
		</mx:Transition>
	</mx:transitions>

<mx:XML id="xmldata" source="data/graph.xml" />
	
</mx:Application>
